/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import { Algodv2, OnApplicationComplete, Transaction, TransactionWithSigner, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "assetOptIn(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createWill(address,byte[],byte[],byte[],byte[],byte[],uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "increateEndTime(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "executeWill(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "currentId": {
          "type": "uint64",
          "key": "id"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 9
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDkKCi8vIFRoaXMgVEVBTCB3YXMgZ2VuZXJhdGVkIGJ5IFRFQUxTY3JpcHQgdjAuNTkuMAovLyBodHRwczovL2dpdGh1Yi5jb20vYWxnb3JhbmRmb3VuZGF0aW9uL1RFQUxTY3JpcHQKCi8vIFRoaXMgY29udHJhY3QgaXMgY29tcGxpYW50IHdpdGggYW5kL29yIGltcGxlbWVudHMgdGhlIGZvbGxvd2luZyBBUkNzOiBbIEFSQzQgXQoKLy8gVGhlIGZvbGxvd2luZyB0ZW4gbGluZXMgb2YgVEVBTCBoYW5kbGUgaW5pdGlhbCBwcm9ncmFtIGZsb3cKLy8gVGhpcyBwYXR0ZXJuIGlzIHVzZWQgdG8gbWFrZSBpdCBlYXN5IGZvciBhbnlvbmUgdG8gcGFyc2UgdGhlIHN0YXJ0IG9mIHRoZSBwcm9ncmFtIGFuZCBkZXRlcm1pbmUgaWYgYSBzcGVjaWZpYyBhY3Rpb24gaXMgYWxsb3dlZAovLyBIZXJlLCBhY3Rpb24gcmVmZXJzIHRvIHRoZSBPbkNvbXBsZXRlIGluIGNvbWJpbmF0aW9uIHdpdGggd2hldGhlciB0aGUgYXBwIGlzIGJlaW5nIGNyZWF0ZWQgb3IgY2FsbGVkCi8vIEV2ZXJ5IHBvc3NpYmxlIGFjdGlvbiBmb3IgdGhpcyBjb250cmFjdCBpcyByZXByZXNlbnRlZCBpbiB0aGUgc3dpdGNoIHN0YXRlbWVudAovLyBJZiB0aGUgYWN0aW9uIGlzIG5vdCBpbXBsbWVudGVkIGluIHRoZSBjb250cmFjdCwgaXRzIHJlcHNlY3RpdmUgYnJhbmNoIHdpbGwgYmUgIk5PVF9JTVBMTUVOVEVEIiB3aGljaCBqdXN0IGNvbnRhaW5zICJlcnIiCnR4biBBcHBsaWNhdGlvbklECmludCAwCj4KaW50IDYKKgp0eG4gT25Db21wbGV0aW9uCisKc3dpdGNoIGNyZWF0ZV9Ob09wIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgY2FsbF9Ob09wCgpOT1RfSU1QTEVNRU5URUQ6CgllcnIKCnZlcmlmeU5hdGl2ZToKCXByb3RvIDYgMAoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjI5CgkvLyByb3VuZHMgPSBsZW4obmF0aXZlQW1vdW50KSAvIDgKCWZyYW1lX2RpZyAtMSAvLyBuYXRpdmVBbW91bnQ6IGJ5dGVzCglsZW4KCWludCA4CgkvCglmcmFtZV9idXJ5IC0zIC8vIHJvdW5kczogdWludDY0CgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6MzAKCS8vIGFzc2VydChyb3VuZHMgPT09IGxlbihuYXRpdmVUbykgLyAzMikKCWZyYW1lX2RpZyAtMyAvLyByb3VuZHM6IHVpbnQ2NAoJZnJhbWVfZGlnIC0yIC8vIG5hdGl2ZVRvOiBieXRlcwoJbGVuCglpbnQgMzIKCS8KCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czozMQoJLy8gdG90YWxDb3N0ID0KCS8vICAgICAgIENPU1RfUEVSX0JPWCArIC8vIGNvc3Qgb2YgYm94CgkvLyAgICAgICBNQVhfQk9YX1NJWkUgKiBDT1NUX1BFUl9CWVRFICsgLy8gY29zdCBvZiBkYXRhCgkvLyAgICAgICAyICogNjQgKiBDT1NUX1BFUl9CWVRFCglpbnQgMzMzMDUwMAoJZnJhbWVfYnVyeSAtNCAvLyB0b3RhbENvc3Q6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjM2CgkvLyBpID0gMAoJaW50IDAKCWZyYW1lX2J1cnkgLTUgLy8gaTogdWludDY0Cgpmb3JfMDoKCWZyYW1lX2RpZyAtNSAvLyBpOiB1aW50NjQKCWZyYW1lX2RpZyAtMyAvLyByb3VuZHM6IHVpbnQ2NAoJPAoJYnogZm9yXzBfZW5kCgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6MzcKCS8vIGN1cnJlbnRBbW91bnRJbkJ5dGVzID0gZXh0cmFjdDMobmF0aXZlQW1vdW50LCBpICogOCwgOCkKCWZyYW1lX2RpZyAtMSAvLyBuYXRpdmVBbW91bnQ6IGJ5dGVzCglmcmFtZV9kaWcgLTUgLy8gaTogdWludDY0CglpbnQgOAoJKgoJaW50IDgKCWV4dHJhY3QzCglmcmFtZV9idXJ5IC02IC8vIGN1cnJlbnRBbW91bnRJbkJ5dGVzOiBieXRlcwoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjM4CgkvLyB0b3RhbENvc3QgPSB0b3RhbENvc3QgKyBidG9pKGN1cnJlbnRBbW91bnRJbkJ5dGVzKQoJZnJhbWVfZGlnIC00IC8vIHRvdGFsQ29zdDogdWludDY0CglmcmFtZV9kaWcgLTYgLy8gY3VycmVudEFtb3VudEluQnl0ZXM6IGJ5dGVzCglidG9pCgkrCglmcmFtZV9idXJ5IC00IC8vIHRvdGFsQ29zdDogdWludDY0CgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6MzYKCS8vIGkgPSBpICsgMQoJZnJhbWVfZGlnIC01IC8vIGk6IHVpbnQ2NAoJaW50IDEKCSsKCWZyYW1lX2J1cnkgLTUgLy8gaTogdWludDY0CgliIGZvcl8wCgpmb3JfMF9lbmQ6CgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czo0MQoJLy8gdmVyaWZ5VHhuKHRoaXMudHhuR3JvdXBbMF0sIHsgcmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsIGFtb3VudDogeyBncmVhdGVyVGhhbkVxdWFsVG86IHRvdGFsQ29zdCB9IH0pCgkvLyB2ZXJpZnkgcmVjZWl2ZXIKCWludCAwCglndHhucyBSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYW1vdW50CglpbnQgMAoJZ3R4bnMgQW1vdW50CglmcmFtZV9kaWcgLTQgLy8gdG90YWxDb3N0OiB1aW50NjQKCT49Cglhc3NlcnQKCXJldHN1YgoKdmVyaWZ5QXNzZXRzOgoJcHJvdG8gMTQgMAoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjQ1CgkvLyByb3VuZHMgPSBsZW4oYXNzZXRzQW1vdW50KSAvIDgKCWZyYW1lX2RpZyAtMSAvLyBhc3NldHNBbW91bnQ6IGJ5dGVzCglsZW4KCWludCA4CgkvCglmcmFtZV9idXJ5IC00IC8vIHJvdW5kczogdWludDY0CgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6NDYKCS8vIGFzc2VydChyb3VuZHMgPT09IGxlbihhc3NldHMpIC8gOCAmJiByb3VuZHMgPT09IGxlbihhc3NldHNUbykgLyAzMikKCWZyYW1lX2RpZyAtNCAvLyByb3VuZHM6IHVpbnQ2NAoJZnJhbWVfZGlnIC0zIC8vIGFzc2V0czogYnl0ZXMKCWxlbgoJaW50IDgKCS8KCT09CglkdXAKCWJ6IHNraXBfYW5kMAoJZnJhbWVfZGlnIC00IC8vIHJvdW5kczogdWludDY0CglmcmFtZV9kaWcgLTIgLy8gYXNzZXRzVG86IGJ5dGVzCglsZW4KCWludCAzMgoJLwoJPT0KCSYmCgpza2lwX2FuZDA6Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czo0OAoJLy8gaSA9IDAKCWludCAwCglmcmFtZV9idXJ5IC01IC8vIGk6IHVpbnQ2NAoKZm9yXzE6CglmcmFtZV9kaWcgLTUgLy8gaTogdWludDY0CglmcmFtZV9kaWcgLTQgLy8gcm91bmRzOiB1aW50NjQKCTwKCWJ6IGZvcl8xX2VuZAoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjQ5CgkvLyBjdXJyZW50QXNzZXRJbkJ5dGVzID0gZXh0cmFjdDMoYXNzZXRzLCBpICogOCwgOCkKCWZyYW1lX2RpZyAtMyAvLyBhc3NldHM6IGJ5dGVzCglmcmFtZV9kaWcgLTUgLy8gaTogdWludDY0CglpbnQgOAoJKgoJaW50IDgKCWV4dHJhY3QzCglmcmFtZV9idXJ5IC02IC8vIGN1cnJlbnRBc3NldEluQnl0ZXM6IGJ5dGVzCgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6NTAKCS8vIGN1cnJlbnRBbW91bnRJbkJ5dGVzID0gZXh0cmFjdDMoYXNzZXRzQW1vdW50LCBpICogOCwgOCkKCWZyYW1lX2RpZyAtMSAvLyBhc3NldHNBbW91bnQ6IGJ5dGVzCglmcmFtZV9kaWcgLTUgLy8gaTogdWludDY0CglpbnQgOAoJKgoJaW50IDgKCWV4dHJhY3QzCglmcmFtZV9idXJ5IC03IC8vIGN1cnJlbnRBbW91bnRJbkJ5dGVzOiBieXRlcwoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjUyCgkvLyBjdXJyZW50QXNzZXQgPSBBc3NldC5mcm9tSUQoYnRvaShjdXJyZW50QXNzZXRJbkJ5dGVzKSkKCWZyYW1lX2RpZyAtNiAvLyBjdXJyZW50QXNzZXRJbkJ5dGVzOiBieXRlcwoJYnRvaQoJZnJhbWVfYnVyeSAtOCAvLyBjdXJyZW50QXNzZXQ6IGFzc2V0CgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6NTMKCS8vIGN1cnJlbnRBbW91bnQgPSBidG9pKGN1cnJlbnRBbW91bnRJbkJ5dGVzKQoJZnJhbWVfZGlnIC03IC8vIGN1cnJlbnRBbW91bnRJbkJ5dGVzOiBieXRlcwoJYnRvaQoJZnJhbWVfYnVyeSAtOSAvLyBjdXJyZW50QW1vdW50OiB1aW50NjQKCgkvLyBpZjBfY29uZGl0aW9uCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czo1NQoJLy8gdGhpcy5hc3NldHNIZWxwZXIoY3VycmVudEFzc2V0KS5leGlzdHMKCXR4bmEgQXBwbGljYXRpb25zIDAKCWZyYW1lX2RpZyAtOCAvLyBjdXJyZW50QXNzZXQ6IGFzc2V0CglpdG9iCglhcHBfZ2xvYmFsX2dldF9leAoJc3dhcAoJcG9wCglieiBpZjBfZWxzZQoKCS8vIGlmMF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czo1NgoJLy8gdmFsdWUgPSB0aGlzLmFzc2V0c0hlbHBlcihjdXJyZW50QXNzZXQpLnZhbHVlICsgY3VycmVudEFtb3VudAoJZnJhbWVfZGlnIC04IC8vIGN1cnJlbnRBc3NldDogYXNzZXQKCWl0b2IKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgLTkgLy8gY3VycmVudEFtb3VudDogdWludDY0CgkrCglmcmFtZV9idXJ5IC0xMCAvLyB2YWx1ZTogdWludDY0CgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6NTcKCS8vIHRoaXMuYXNzZXRzSGVscGVyKGN1cnJlbnRBc3NldCkudmFsdWUgPSB2YWx1ZQoJZnJhbWVfZGlnIC04IC8vIGN1cnJlbnRBc3NldDogYXNzZXQKCWl0b2IKCWZyYW1lX2RpZyAtMTAgLy8gdmFsdWU6IHVpbnQ2NAoJYXBwX2dsb2JhbF9wdXQKCWIgaWYwX2VuZAoKaWYwX2Vsc2U6CgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czo1OQoJLy8gdGhpcy5hc3NldHNIZWxwZXIoY3VycmVudEFzc2V0KS52YWx1ZSA9IGN1cnJlbnRBbW91bnQKCWZyYW1lX2RpZyAtOCAvLyBjdXJyZW50QXNzZXQ6IGFzc2V0CglpdG9iCglmcmFtZV9kaWcgLTkgLy8gY3VycmVudEFtb3VudDogdWludDY0CglhcHBfZ2xvYmFsX3B1dAoKaWYwX2VuZDoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjQ4CgkvLyBpID0gaSArIDEKCWZyYW1lX2RpZyAtNSAvLyBpOiB1aW50NjQKCWludCAxCgkrCglmcmFtZV9idXJ5IC01IC8vIGk6IHVpbnQ2NAoJYiBmb3JfMQoKZm9yXzFfZW5kOgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6NjMKCS8vIGkgPSAwCglpbnQgMAoJZnJhbWVfYnVyeSAtMTEgLy8gaTogdWludDY0Cgpmb3JfMjoKCWZyYW1lX2RpZyAtMTEgLy8gaTogdWludDY0CglmcmFtZV9kaWcgLTQgLy8gcm91bmRzOiB1aW50NjQKCTwKCWJ6IGZvcl8yX2VuZAoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjY0CgkvLyBjdXJyZW50QXNzZXRJbkJ5dGVzID0gZXh0cmFjdDMoYXNzZXRzLCBpICogOCwgOCkKCWZyYW1lX2RpZyAtMyAvLyBhc3NldHM6IGJ5dGVzCglmcmFtZV9kaWcgLTExIC8vIGk6IHVpbnQ2NAoJaW50IDgKCSoKCWludCA4CglleHRyYWN0MwoJZnJhbWVfYnVyeSAtMTIgLy8gY3VycmVudEFzc2V0SW5CeXRlczogYnl0ZXMKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czo2NQoJLy8gY3VycmVudEFzc2V0ID0gQXNzZXQuZnJvbUlEKGJ0b2koY3VycmVudEFzc2V0SW5CeXRlcykpCglmcmFtZV9kaWcgLTEyIC8vIGN1cnJlbnRBc3NldEluQnl0ZXM6IGJ5dGVzCglidG9pCglmcmFtZV9idXJ5IC0xMyAvLyBjdXJyZW50QXNzZXQ6IGFzc2V0CgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6NjYKCS8vIHZhbHVlID0gdGhpcy5hc3NldHNIZWxwZXIoY3VycmVudEFzc2V0KS52YWx1ZQoJZnJhbWVfZGlnIC0xMyAvLyBjdXJyZW50QXNzZXQ6IGFzc2V0CglpdG9iCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfYnVyeSAtMTQgLy8gdmFsdWU6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjY4CgkvLyB2ZXJpZnlUeG4odGhpcy50eG5Hcm91cFtpICsgMV0sIHsKCS8vICAgICAgICAgeGZlckFzc2V0OiBjdXJyZW50QXNzZXQsCgkvLyAgICAgICAgIGFzc2V0QW1vdW50OiB7IGdyZWF0ZXJUaGFuRXF1YWxUbzogdmFsdWUgfSwKCS8vICAgICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgIH0pCglmcmFtZV9kaWcgLTExIC8vIGk6IHVpbnQ2NAoJaW50IDEKCSsKCXN0b3JlIDggLy8gdmVyaWZ5VHhuIGluZGV4CgoJLy8gdmVyaWZ5IHhmZXJBc3NldAoJbG9hZCA4IC8vIHZlcmlmeVR4biBpbmRleAoJZ3R4bnMgWGZlckFzc2V0CglmcmFtZV9kaWcgLTEzIC8vIGN1cnJlbnRBc3NldDogYXNzZXQKCT09Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYXNzZXRBbW91bnQKCWxvYWQgOCAvLyB2ZXJpZnlUeG4gaW5kZXgKCWd0eG5zIEFzc2V0QW1vdW50CglmcmFtZV9kaWcgLTE0IC8vIHZhbHVlOiB1aW50NjQKCT49Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYXNzZXRSZWNlaXZlcgoJbG9hZCA4IC8vIHZlcmlmeVR4biBpbmRleAoJZ3R4bnMgQXNzZXRSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czo3NAoJLy8gdGhpcy5hc3NldHNIZWxwZXIoY3VycmVudEFzc2V0KS5kZWxldGUoKQoJZnJhbWVfZGlnIC0xMyAvLyBjdXJyZW50QXNzZXQ6IGFzc2V0CglpdG9iCglhcHBfZ2xvYmFsX2RlbAoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjYzCgkvLyBpID0gaSArIDEKCWZyYW1lX2RpZyAtMTEgLy8gaTogdWludDY0CglpbnQgMQoJKwoJZnJhbWVfYnVyeSAtMTEgLy8gaTogdWludDY0CgliIGZvcl8yCgpmb3JfMl9lbmQ6CglyZXRzdWIKCmNyZWF0ZVdpbGxTYW5pdHlDaGVja3M6Cglwcm90byA2IDAKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czo4NgoJLy8gdGhpcy52ZXJpZnlOYXRpdmUobmF0aXZlQW1vdW50LCBuYXRpdmVUbykKCWJ5dGUgMHg7IGR1cG4gMyAvLyBwdXNoIGVtcHR5IGJ5dGVzIHRvIGZpbGwgdGhlIHN0YWNrIGZyYW1lIGZvciB0aGlzIHN1YnJvdXRpbmUncyBsb2NhbCB2YXJpYWJsZXMKCWZyYW1lX2RpZyAtMiAvLyBuYXRpdmVUbzogYnl0ZXMKCWZyYW1lX2RpZyAtMSAvLyBuYXRpdmVBbW91bnQ6IGJ5dGVzCgljYWxsc3ViIHZlcmlmeU5hdGl2ZQoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjg3CgkvLyB0aGlzLnZlcmlmeUFzc2V0cyhhc3NldHNBbW91bnQsIGFzc2V0c1RvLCBhc3NldHMpCglieXRlIDB4OyBkdXBuIDEwIC8vIHB1c2ggZW1wdHkgYnl0ZXMgdG8gZmlsbCB0aGUgc3RhY2sgZnJhbWUgZm9yIHRoaXMgc3Vicm91dGluZSdzIGxvY2FsIHZhcmlhYmxlcwoJZnJhbWVfZGlnIC01IC8vIGFzc2V0czogYnl0ZXMKCWZyYW1lX2RpZyAtNCAvLyBhc3NldHNUbzogYnl0ZXMKCWZyYW1lX2RpZyAtMyAvLyBhc3NldHNBbW91bnQ6IGJ5dGVzCgljYWxsc3ViIHZlcmlmeUFzc2V0cwoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjg4CgkvLyBhc3NlcnQoZW5kVGltZSA+IGdsb2JhbHMubGF0ZXN0VGltZXN0YW1wKQoJZnJhbWVfZGlnIC02IC8vIGVuZFRpbWU6IHVpbnQ2NAoJZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAoJPgoJYXNzZXJ0CglyZXRzdWIKCnNlbmROYXRpdmU6Cglwcm90byAyIDAKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czo5MgoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgYW1vdW50OiBhbW91bnQsCgkvLyAgICAgICByZWNlaXZlcjogdG8sCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBwYXkKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czo5MwoJLy8gYW1vdW50OiBhbW91bnQKCWZyYW1lX2RpZyAtMiAvLyBhbW91bnQ6IHVpbnQ2NAoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czo5NAoJLy8gcmVjZWl2ZXI6IHRvCglmcmFtZV9kaWcgLTEgLy8gdG86IGFkZHJlc3MKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglyZXRzdWIKCnNlbmRBc3NldDoKCXByb3RvIDMgMAoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjk5CgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICB4ZmVyQXNzZXQ6IGFzc2V0LAoJLy8gICAgICAgYXNzZXRBbW91bnQ6IGFtb3VudCwKCS8vICAgICAgIGFzc2V0UmVjZWl2ZXI6IHRvLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnQgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czoxMDAKCS8vIHhmZXJBc3NldDogYXNzZXQKCWZyYW1lX2RpZyAtMSAvLyBhc3NldDogYXNzZXQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6MTAxCgkvLyBhc3NldEFtb3VudDogYW1vdW50CglmcmFtZV9kaWcgLTMgLy8gYW1vdW50OiB1aW50NjQKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czoxMDIKCS8vIGFzc2V0UmVjZWl2ZXI6IHRvCglmcmFtZV9kaWcgLTIgLy8gdG86IGFkZHJlc3MKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKZ2V0Q3VycmVudElkOgoJcHJvdG8gMCAxCgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6MTA3CgkvLyByZXR1cm4gdGhpcy5jdXJyZW50SWQudmFsdWU7CglieXRlIDB4Njk2NCAvLyAiaWQiCglhcHBfZ2xvYmFsX2dldAoJcmV0c3ViCgppbmNyZW1lbnRDdXJyZW50SWQ6Cglwcm90byAwIDAKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czoxMTEKCS8vIHRoaXMuY3VycmVudElkLnZhbHVlID0gdGhpcy5nZXRDdXJyZW50SWQoKSArIDEKCWJ5dGUgMHg2OTY0IC8vICJpZCIKCWNhbGxzdWIgZ2V0Q3VycmVudElkCglpbnQgMQoJKwoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gYXNzZXRPcHRJbihhc3NldCl2b2lkCmFiaV9yb3V0ZV9hc3NldE9wdEluOgoJLy8gYXNzZXQ6IGFzc2V0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgl0eG5hcyBBc3NldHMKCgkvLyBleGVjdXRlIGFzc2V0T3B0SW4oYXNzZXQpdm9pZAoJY2FsbHN1YiBhc3NldE9wdEluCglpbnQgMQoJcmV0dXJuCgphc3NldE9wdEluOgoJcHJvdG8gMSAwCgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6MTE1CgkvLyB2ZXJpZnlUeG4odGhpcy50eG4sIHsgc2VuZGVyOiB0aGlzLmFwcC5jcmVhdG9yIH0pCgkvLyB2ZXJpZnkgc2VuZGVyCgl0eG4gU2VuZGVyCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglhcHBfcGFyYW1zX2dldCBBcHBDcmVhdG9yCglhc3NlcnQKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czoxMTYKCS8vIHNlbmRBc3NldFRyYW5zZmVyKHsKCS8vICAgICAgIGFzc2V0UmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICB4ZmVyQXNzZXQ6IGFzc2V0LAoJLy8gICAgICAgYXNzZXRBbW91bnQ6IDAsCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBheGZlcgoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjExNwoJLy8gYXNzZXRSZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjExOAoJLy8geGZlckFzc2V0OiBhc3NldAoJZnJhbWVfZGlnIC0xIC8vIGFzc2V0OiBhc3NldAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czoxMTkKCS8vIGFzc2V0QW1vdW50OiAwCglpbnQgMAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKLy8gY3JlYXRlV2lsbCh1aW50NjQsYnl0ZXMsYnl0ZXMsYnl0ZXMsYnl0ZXMsYnl0ZXMsYWRkcmVzcyl1aW50NjQKYWJpX3JvdXRlX2NyZWF0ZVdpbGw6CglieXRlIDB4OyBkdXAgLy8gcHVzaCBlbXB0eSBieXRlcyB0byBmaWxsIHRoZSBzdGFjayBmcmFtZSBmb3IgdGhpcyBzdWJyb3V0aW5lJ3MgbG9jYWwgdmFyaWFibGVzCgoJLy8gZW5kVGltZTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA3CglidG9pCgoJLy8gbmF0aXZlVG86IGJ5dGVbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNgoJZXh0cmFjdCAyIDAKCgkvLyBuYXRpdmVBbW91bnQ6IGJ5dGVbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNQoJZXh0cmFjdCAyIDAKCgkvLyBhc3NldHNUbzogYnl0ZVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyA0CglleHRyYWN0IDIgMAoKCS8vIGFzc2V0c0Ftb3VudDogYnl0ZVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglleHRyYWN0IDIgMAoKCS8vIGFzc2V0czogYnl0ZVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglleHRyYWN0IDIgMAoKCS8vIGZyb206IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIGNyZWF0ZVdpbGwodWludDY0LGJ5dGVzLGJ5dGVzLGJ5dGVzLGJ5dGVzLGJ5dGVzLGFkZHJlc3MpdWludDY0CgljYWxsc3ViIGNyZWF0ZVdpbGwKCWludCAxCglyZXR1cm4KCmNyZWF0ZVdpbGw6Cglwcm90byA5IDAKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czoxMzMKCS8vIHRoaXMuY3JlYXRlV2lsbFNhbml0eUNoZWNrcyhuYXRpdmVBbW91bnQsIG5hdGl2ZVRvLCBhc3NldHNBbW91bnQsIGFzc2V0c1RvLCBhc3NldHMsIGVuZFRpbWUpCglmcmFtZV9kaWcgLTcgLy8gZW5kVGltZTogdWludDY0CglmcmFtZV9kaWcgLTIgLy8gYXNzZXRzOiBieXRlcwoJZnJhbWVfZGlnIC00IC8vIGFzc2V0c1RvOiBieXRlcwoJZnJhbWVfZGlnIC0zIC8vIGFzc2V0c0Ftb3VudDogYnl0ZXMKCWZyYW1lX2RpZyAtNiAvLyBuYXRpdmVUbzogYnl0ZXMKCWZyYW1lX2RpZyAtNSAvLyBuYXRpdmVBbW91bnQ6IGJ5dGVzCgljYWxsc3ViIGNyZWF0ZVdpbGxTYW5pdHlDaGVja3MKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czoxMzYKCS8vIHRoaXMuaW5jcmVtZW50Q3VycmVudElkKCkKCWNhbGxzdWIgaW5jcmVtZW50Q3VycmVudElkCgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6MTM3CgkvLyBpZCA9IHRoaXMuZ2V0Q3VycmVudElkKCkKCWNhbGxzdWIgZ2V0Q3VycmVudElkCglmcmFtZV9idXJ5IC04IC8vIGlkOiB1aW50NjQKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czoxMzkKCS8vIHdpbGw6IFdpbGwgPSB7CgkvLyAgICAgICBmcm9tOiBmcm9tLAoJLy8gICAgICAgaWQ6IGlkLAoJLy8gICAgICAgYXNzZXRzOiBhc3NldHMsCgkvLyAgICAgICBhc3NldHNBbW91bnQ6IGFzc2V0c0Ftb3VudCwKCS8vICAgICAgIGFzc2V0c1RvOiBhc3NldHNUbywKCS8vICAgICAgIG5hdGl2ZUFtb3VudDogbmF0aXZlQW1vdW50LAoJLy8gICAgICAgbmF0aXZlVG86IG5hdGl2ZVRvLAoJLy8gICAgICAgZW5kVGltZTogZW5kVGltZSwKCS8vICAgICB9CglieXRlIDB4IC8vIGluaXRpYWwgaGVhZAoJYnl0ZSAweCAvLyBpbml0aWFsIHRhaWwKCWJ5dGUgMHgwMDNhIC8vIGluaXRpYWwgaGVhZCBvZmZzZXQKCWZyYW1lX2RpZyAtMSAvLyBmcm9tOiBhZGRyZXNzCgljYWxsc3ViIHByb2Nlc3Nfc3RhdGljX3R1cGxlX2VsZW1lbnQKCWZyYW1lX2RpZyAtOCAvLyBpZDogdWludDY0CglpdG9iCgljYWxsc3ViIHByb2Nlc3Nfc3RhdGljX3R1cGxlX2VsZW1lbnQKCWZyYW1lX2RpZyAtMiAvLyBhc3NldHM6IGJ5dGVzCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY2FsbHN1YiBwcm9jZXNzX2R5bmFtaWNfdHVwbGVfZWxlbWVudAoJZnJhbWVfZGlnIC0zIC8vIGFzc2V0c0Ftb3VudDogYnl0ZXMKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CgljYWxsc3ViIHByb2Nlc3NfZHluYW1pY190dXBsZV9lbGVtZW50CglmcmFtZV9kaWcgLTQgLy8gYXNzZXRzVG86IGJ5dGVzCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY2FsbHN1YiBwcm9jZXNzX2R5bmFtaWNfdHVwbGVfZWxlbWVudAoJZnJhbWVfZGlnIC01IC8vIG5hdGl2ZUFtb3VudDogYnl0ZXMKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CgljYWxsc3ViIHByb2Nlc3NfZHluYW1pY190dXBsZV9lbGVtZW50CglmcmFtZV9kaWcgLTYgLy8gbmF0aXZlVG86IGJ5dGVzCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY2FsbHN1YiBwcm9jZXNzX2R5bmFtaWNfdHVwbGVfZWxlbWVudAoJZnJhbWVfZGlnIC03IC8vIGVuZFRpbWU6IHVpbnQ2NAoJaXRvYgoJY2FsbHN1YiBwcm9jZXNzX3N0YXRpY190dXBsZV9lbGVtZW50Cglwb3AgLy8gcG9wIGhlYWQgb2Zmc2V0Cgljb25jYXQgLy8gY29uY2F0IGhlYWQgYW5kIHRhaWwKCWZyYW1lX2J1cnkgLTkgLy8gd2lsbDogV2lsbAoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjE1MAoJLy8gdGhpcy53aWxscyh0aGlzLmN1cnJlbnRJZC52YWx1ZSkudmFsdWUgPSB3aWxsCglieXRlIDB4Njk2NCAvLyAiaWQiCglhcHBfZ2xvYmFsX2dldAoJaXRvYgoJZHVwCglib3hfZGVsCglwb3AKCWZyYW1lX2RpZyAtOSAvLyB3aWxsOiBXaWxsCglib3hfcHV0CgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6MTUyCgkvLyByZXR1cm4gaWQ7CglmcmFtZV9kaWcgLTggLy8gaWQ6IHVpbnQ2NAoJaXRvYgoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyBpbmNyZWF0ZUVuZFRpbWUodWludDY0KXZvaWQKYWJpX3JvdXRlX2luY3JlYXRlRW5kVGltZToKCWJ5dGUgMHg7IGR1cCAvLyBwdXNoIGVtcHR5IGJ5dGVzIHRvIGZpbGwgdGhlIHN0YWNrIGZyYW1lIGZvciB0aGlzIHN1YnJvdXRpbmUncyBsb2NhbCB2YXJpYWJsZXMKCgkvLyB3aWxsSWQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgaW5jcmVhdGVFbmRUaW1lKHVpbnQ2NCl2b2lkCgljYWxsc3ViIGluY3JlYXRlRW5kVGltZQoJaW50IDEKCXJldHVybgoKaW5jcmVhdGVFbmRUaW1lOgoJcHJvdG8gMyAwCgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6MTU2CgkvLyB3aWxsID0gdGhpcy53aWxscyh3aWxsSWQpLnZhbHVlCglmcmFtZV9kaWcgLTEgLy8gd2lsbElkOiB1aW50NjQKCWl0b2IKCWZyYW1lX2J1cnkgLTIgLy8gc3RvcmFnZSBrZXkvL3dpbGwKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czoxNTcKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHdpbGwuZnJvbSkKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAtMiAvLyBzdG9yYWdlIGtleS8vd2lsbAoJYm94X2dldAoJYXNzZXJ0CglzdG9yZSAwIC8vIGZ1bGwgYXJyYXkKCWxvYWQgMCAvLyBmdWxsIGFycmF5CglleHRyYWN0IDAgMzIKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czoxNTgKCS8vIGN1cnJlbnRFbmRUaW1lID0gdGhpcy53aWxscyh3aWxsSWQpLnZhbHVlLmVuZFRpbWUKCWZyYW1lX2RpZyAtMSAvLyB3aWxsSWQ6IHVpbnQ2NAoJaXRvYgoJYm94X2dldAoJYXNzZXJ0CglzdG9yZSAwIC8vIGZ1bGwgYXJyYXkKCWxvYWQgMCAvLyBmdWxsIGFycmF5CglleHRyYWN0IDUwIDgKCWJ0b2kKCWZyYW1lX2J1cnkgLTMgLy8gY3VycmVudEVuZFRpbWU6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjE1OQoJLy8gdGhpcy53aWxscyh3aWxsSWQpLnZhbHVlLmVuZFRpbWUgPSBjdXJyZW50RW5kVGltZSArIE9ORV9EQVkgKiAzNjUKCWZyYW1lX2RpZyAtMSAvLyB3aWxsSWQ6IHVpbnQ2NAoJaXRvYgoJYm94X2dldAoJYXNzZXJ0CglzdG9yZSAwIC8vIGZ1bGwgYXJyYXkKCWxvYWQgMCAvLyBmdWxsIGFycmF5CglpbnQgNTAKCWZyYW1lX2RpZyAtMyAvLyBjdXJyZW50RW5kVGltZTogdWludDY0CglpbnQgMzE1MzYwMDAKCSsKCWl0b2IKCXJlcGxhY2UzCglmcmFtZV9kaWcgLTEgLy8gd2lsbElkOiB1aW50NjQKCWl0b2IKCWR1cAoJYm94X2RlbAoJcG9wCglzd2FwCglib3hfcHV0CglyZXRzdWIKCi8vIGV4ZWN1dGVXaWxsKHVpbnQ2NCl2b2lkCmFiaV9yb3V0ZV9leGVjdXRlV2lsbDoKCWJ5dGUgMHg7IGR1cG4gOCAvLyBwdXNoIGVtcHR5IGJ5dGVzIHRvIGZpbGwgdGhlIHN0YWNrIGZyYW1lIGZvciB0aGlzIHN1YnJvdXRpbmUncyBsb2NhbCB2YXJpYWJsZXMKCgkvLyB3aWxsSWQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgZXhlY3V0ZVdpbGwodWludDY0KXZvaWQKCWNhbGxzdWIgZXhlY3V0ZVdpbGwKCWludCAxCglyZXR1cm4KCmV4ZWN1dGVXaWxsOgoJcHJvdG8gMTAgMAoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjE2MwoJLy8gd2lsbCA9IHRoaXMud2lsbHMod2lsbElkKS52YWx1ZQoJZnJhbWVfZGlnIC0xIC8vIHdpbGxJZDogdWludDY0CglpdG9iCglmcmFtZV9idXJ5IC0yIC8vIHN0b3JhZ2Uga2V5Ly93aWxsCgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6MTY1CgkvLyBhc3NlcnQoZ2xvYmFscy5sYXRlc3RUaW1lc3RhbXAgPj0gd2lsbC5lbmRUaW1lKQoJZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAoJZnJhbWVfZGlnIC0yIC8vIHN0b3JhZ2Uga2V5Ly93aWxsCglib3hfZ2V0Cglhc3NlcnQKCXN0b3JlIDAgLy8gZnVsbCBhcnJheQoJbG9hZCAwIC8vIGZ1bGwgYXJyYXkKCWV4dHJhY3QgNTAgOAoJYnRvaQoJPj0KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjE2OAoJLy8gcm91bmRzID0gbGVuKHdpbGwubmF0aXZlQW1vdW50KSAvIDgKCWZyYW1lX2RpZyAtMiAvLyBzdG9yYWdlIGtleS8vd2lsbAoJYm94X2dldAoJYXNzZXJ0CglzdG9yZSAwIC8vIGZ1bGwgYXJyYXkKCWludCA0NgoJbG9hZCAwIC8vIGZ1bGwgYXJyYXkKCWxvYWQgMCAvLyBmdWxsIGFycmF5Cgl1bmNvdmVyIDIKCWV4dHJhY3RfdWludDE2CglkdXAgLy8gZHVwbGljYXRlIHN0YXJ0IG9mIGVsZW1lbnQKCWxvYWQgMCAvLyBmdWxsIGFycmF5Cglzd2FwCglleHRyYWN0X3VpbnQxNiAvLyBnZXQgbnVtYmVyIG9mIGVsZW1lbnRzCglpbnQgMSAvLyBnZXQgdHlwZSBsZW5ndGgKCSogLy8gbXVsdGlwbHkgYnkgdHlwZSBsZW5ndGgKCWludCAyCgkrIC8vIGFkZCB0d28gZm9yIGxlbmd0aAoJZXh0cmFjdDMKCWV4dHJhY3QgMiAwCglsZW4KCWludCA4CgkvCglmcmFtZV9idXJ5IC0zIC8vIHJvdW5kczogdWludDY0CgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6MTY5CgkvLyBpID0gMAoJaW50IDAKCWZyYW1lX2J1cnkgLTQgLy8gaTogdWludDY0Cgpmb3JfMzoKCWZyYW1lX2RpZyAtNCAvLyBpOiB1aW50NjQKCWZyYW1lX2RpZyAtMyAvLyByb3VuZHM6IHVpbnQ2NAoJPAoJYnogZm9yXzNfZW5kCgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6MTcwCgkvLyBjdXJyZW50QW1vdW50ID0gYnRvaShleHRyYWN0Myh3aWxsLm5hdGl2ZUFtb3VudCwgaSAqIDgsIDgpKQoJZnJhbWVfZGlnIC0yIC8vIHN0b3JhZ2Uga2V5Ly93aWxsCglib3hfZ2V0Cglhc3NlcnQKCXN0b3JlIDAgLy8gZnVsbCBhcnJheQoJaW50IDQ2Cglsb2FkIDAgLy8gZnVsbCBhcnJheQoJbG9hZCAwIC8vIGZ1bGwgYXJyYXkKCXVuY292ZXIgMgoJZXh0cmFjdF91aW50MTYKCWR1cCAvLyBkdXBsaWNhdGUgc3RhcnQgb2YgZWxlbWVudAoJbG9hZCAwIC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWV4dHJhY3RfdWludDE2IC8vIGdldCBudW1iZXIgb2YgZWxlbWVudHMKCWludCAxIC8vIGdldCB0eXBlIGxlbmd0aAoJKiAvLyBtdWx0aXBseSBieSB0eXBlIGxlbmd0aAoJaW50IDIKCSsgLy8gYWRkIHR3byBmb3IgbGVuZ3RoCglleHRyYWN0MwoJZXh0cmFjdCAyIDAKCWZyYW1lX2RpZyAtNCAvLyBpOiB1aW50NjQKCWludCA4CgkqCglpbnQgOAoJZXh0cmFjdDMKCWJ0b2kKCWZyYW1lX2J1cnkgLTUgLy8gY3VycmVudEFtb3VudDogdWludDY0CgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6MTcxCgkvLyBjdXJyZW50VG8gPSBBZGRyZXNzLmZyb21CeXRlcyhleHRyYWN0Myh3aWxsLm5hdGl2ZVRvLCBpICogMzIsIDMyKSkKCWZyYW1lX2RpZyAtMiAvLyBzdG9yYWdlIGtleS8vd2lsbAoJYm94X2dldAoJYXNzZXJ0CglzdG9yZSAwIC8vIGZ1bGwgYXJyYXkKCWludCA0OAoJbG9hZCAwIC8vIGZ1bGwgYXJyYXkKCWxvYWQgMCAvLyBmdWxsIGFycmF5Cgl1bmNvdmVyIDIKCWV4dHJhY3RfdWludDE2CglkdXAgLy8gZHVwbGljYXRlIHN0YXJ0IG9mIGVsZW1lbnQKCWxvYWQgMCAvLyBmdWxsIGFycmF5Cglzd2FwCglleHRyYWN0X3VpbnQxNiAvLyBnZXQgbnVtYmVyIG9mIGVsZW1lbnRzCglpbnQgMSAvLyBnZXQgdHlwZSBsZW5ndGgKCSogLy8gbXVsdGlwbHkgYnkgdHlwZSBsZW5ndGgKCWludCAyCgkrIC8vIGFkZCB0d28gZm9yIGxlbmd0aAoJZXh0cmFjdDMKCWV4dHJhY3QgMiAwCglmcmFtZV9kaWcgLTQgLy8gaTogdWludDY0CglpbnQgMzIKCSoKCWludCAzMgoJZXh0cmFjdDMKCWZyYW1lX2J1cnkgLTYgLy8gY3VycmVudFRvOiBhZGRyZXNzCgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6MTczCgkvLyB0aGlzLnNlbmROYXRpdmUoY3VycmVudFRvLCBjdXJyZW50QW1vdW50KQoJZnJhbWVfZGlnIC01IC8vIGN1cnJlbnRBbW91bnQ6IHVpbnQ2NAoJZnJhbWVfZGlnIC02IC8vIGN1cnJlbnRUbzogYWRkcmVzcwoJY2FsbHN1YiBzZW5kTmF0aXZlCgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6MTY5CgkvLyBpID0gaSArIDEKCWZyYW1lX2RpZyAtNCAvLyBpOiB1aW50NjQKCWludCAxCgkrCglmcmFtZV9idXJ5IC00IC8vIGk6IHVpbnQ2NAoJYiBmb3JfMwoKZm9yXzNfZW5kOgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6MTc3CgkvLyByb3VuZHMgPSBsZW4od2lsbC5hc3NldHMpIC8gOAoJZnJhbWVfZGlnIC0yIC8vIHN0b3JhZ2Uga2V5Ly93aWxsCglib3hfZ2V0Cglhc3NlcnQKCXN0b3JlIDAgLy8gZnVsbCBhcnJheQoJaW50IDQwCglsb2FkIDAgLy8gZnVsbCBhcnJheQoJbG9hZCAwIC8vIGZ1bGwgYXJyYXkKCXVuY292ZXIgMgoJZXh0cmFjdF91aW50MTYKCWR1cCAvLyBkdXBsaWNhdGUgc3RhcnQgb2YgZWxlbWVudAoJbG9hZCAwIC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWV4dHJhY3RfdWludDE2IC8vIGdldCBudW1iZXIgb2YgZWxlbWVudHMKCWludCAxIC8vIGdldCB0eXBlIGxlbmd0aAoJKiAvLyBtdWx0aXBseSBieSB0eXBlIGxlbmd0aAoJaW50IDIKCSsgLy8gYWRkIHR3byBmb3IgbGVuZ3RoCglleHRyYWN0MwoJZXh0cmFjdCAyIDAKCWxlbgoJaW50IDgKCS8KCWZyYW1lX2J1cnkgLTMgLy8gcm91bmRzOiB1aW50NjQKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czoxNzgKCS8vIGkgPSAwCglpbnQgMAoJZnJhbWVfYnVyeSAtNyAvLyBpOiB1aW50NjQKCmZvcl80OgoJZnJhbWVfZGlnIC03IC8vIGk6IHVpbnQ2NAoJZnJhbWVfZGlnIC0zIC8vIHJvdW5kczogdWludDY0Cgk8CglieiBmb3JfNF9lbmQKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czoxNzkKCS8vIGN1cnJlbnRBc3NldCA9IEFzc2V0LmZyb21JRChidG9pKGV4dHJhY3QzKHdpbGwuYXNzZXRzLCBpICogOCwgOCkpKQoJZnJhbWVfZGlnIC0yIC8vIHN0b3JhZ2Uga2V5Ly93aWxsCglib3hfZ2V0Cglhc3NlcnQKCXN0b3JlIDAgLy8gZnVsbCBhcnJheQoJaW50IDQwCglsb2FkIDAgLy8gZnVsbCBhcnJheQoJbG9hZCAwIC8vIGZ1bGwgYXJyYXkKCXVuY292ZXIgMgoJZXh0cmFjdF91aW50MTYKCWR1cCAvLyBkdXBsaWNhdGUgc3RhcnQgb2YgZWxlbWVudAoJbG9hZCAwIC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWV4dHJhY3RfdWludDE2IC8vIGdldCBudW1iZXIgb2YgZWxlbWVudHMKCWludCAxIC8vIGdldCB0eXBlIGxlbmd0aAoJKiAvLyBtdWx0aXBseSBieSB0eXBlIGxlbmd0aAoJaW50IDIKCSsgLy8gYWRkIHR3byBmb3IgbGVuZ3RoCglleHRyYWN0MwoJZXh0cmFjdCAyIDAKCWZyYW1lX2RpZyAtNyAvLyBpOiB1aW50NjQKCWludCA4CgkqCglpbnQgOAoJZXh0cmFjdDMKCWJ0b2kKCWZyYW1lX2J1cnkgLTggLy8gY3VycmVudEFzc2V0OiBhc3NldAoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjE4MAoJLy8gY3VycmVudFRvID0gQWRkcmVzcy5mcm9tQnl0ZXMoZXh0cmFjdDMod2lsbC5hc3NldHNUbywgaSAqIDMyLCAzMikpCglmcmFtZV9kaWcgLTIgLy8gc3RvcmFnZSBrZXkvL3dpbGwKCWJveF9nZXQKCWFzc2VydAoJc3RvcmUgMCAvLyBmdWxsIGFycmF5CglpbnQgNDQKCWxvYWQgMCAvLyBmdWxsIGFycmF5Cglsb2FkIDAgLy8gZnVsbCBhcnJheQoJdW5jb3ZlciAyCglleHRyYWN0X3VpbnQxNgoJZHVwIC8vIGR1cGxpY2F0ZSBzdGFydCBvZiBlbGVtZW50Cglsb2FkIDAgLy8gZnVsbCBhcnJheQoJc3dhcAoJZXh0cmFjdF91aW50MTYgLy8gZ2V0IG51bWJlciBvZiBlbGVtZW50cwoJaW50IDEgLy8gZ2V0IHR5cGUgbGVuZ3RoCgkqIC8vIG11bHRpcGx5IGJ5IHR5cGUgbGVuZ3RoCglpbnQgMgoJKyAvLyBhZGQgdHdvIGZvciBsZW5ndGgKCWV4dHJhY3QzCglleHRyYWN0IDIgMAoJZnJhbWVfZGlnIC03IC8vIGk6IHVpbnQ2NAoJaW50IDMyCgkqCglpbnQgMzIKCWV4dHJhY3QzCglmcmFtZV9idXJ5IC05IC8vIGN1cnJlbnRUbzogYWRkcmVzcwoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjE4MQoJLy8gY3VycmVudEFtb3VudCA9IGJ0b2koZXh0cmFjdDMod2lsbC5hc3NldHNBbW91bnQsIGkgKiA4LCA4KSkKCWZyYW1lX2RpZyAtMiAvLyBzdG9yYWdlIGtleS8vd2lsbAoJYm94X2dldAoJYXNzZXJ0CglzdG9yZSAwIC8vIGZ1bGwgYXJyYXkKCWludCA0MgoJbG9hZCAwIC8vIGZ1bGwgYXJyYXkKCWxvYWQgMCAvLyBmdWxsIGFycmF5Cgl1bmNvdmVyIDIKCWV4dHJhY3RfdWludDE2CglkdXAgLy8gZHVwbGljYXRlIHN0YXJ0IG9mIGVsZW1lbnQKCWxvYWQgMCAvLyBmdWxsIGFycmF5Cglzd2FwCglleHRyYWN0X3VpbnQxNiAvLyBnZXQgbnVtYmVyIG9mIGVsZW1lbnRzCglpbnQgMSAvLyBnZXQgdHlwZSBsZW5ndGgKCSogLy8gbXVsdGlwbHkgYnkgdHlwZSBsZW5ndGgKCWludCAyCgkrIC8vIGFkZCB0d28gZm9yIGxlbmd0aAoJZXh0cmFjdDMKCWV4dHJhY3QgMiAwCglmcmFtZV9kaWcgLTcgLy8gaTogdWludDY0CglpbnQgOAoJKgoJaW50IDgKCWV4dHJhY3QzCglidG9pCglmcmFtZV9idXJ5IC0xMCAvLyBjdXJyZW50QW1vdW50OiB1aW50NjQKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czoxODMKCS8vIHRoaXMuc2VuZEFzc2V0KGN1cnJlbnRBc3NldCwgY3VycmVudFRvLCBjdXJyZW50QW1vdW50KQoJZnJhbWVfZGlnIC0xMCAvLyBjdXJyZW50QW1vdW50OiB1aW50NjQKCWZyYW1lX2RpZyAtOSAvLyBjdXJyZW50VG86IGFkZHJlc3MKCWZyYW1lX2RpZyAtOCAvLyBjdXJyZW50QXNzZXQ6IGFzc2V0CgljYWxsc3ViIHNlbmRBc3NldAoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjE3OAoJLy8gaSA9IGkgKyAxCglmcmFtZV9kaWcgLTcgLy8gaTogdWludDY0CglpbnQgMQoJKwoJZnJhbWVfYnVyeSAtNyAvLyBpOiB1aW50NjQKCWIgZm9yXzQKCmZvcl80X2VuZDoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjE4NwoJLy8gdGhpcy53aWxscyh3aWxsSWQpLmRlbGV0ZSgpCglmcmFtZV9kaWcgLTEgLy8gd2lsbElkOiB1aW50NjQKCWl0b2IKCWJveF9kZWwKCXJldHN1YgoKYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uOgoJaW50IDEKCXJldHVybgoKY3JlYXRlX05vT3A6CgltZXRob2QgImNyZWF0ZUFwcGxpY2F0aW9uKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCgllcnIKCmNhbGxfTm9PcDoKCW1ldGhvZCAiYXNzZXRPcHRJbihhc3NldCl2b2lkIgoJbWV0aG9kICJjcmVhdGVXaWxsKGFkZHJlc3MsYnl0ZVtdLGJ5dGVbXSxieXRlW10sYnl0ZVtdLGJ5dGVbXSx1aW50NjQpdWludDY0IgoJbWV0aG9kICJpbmNyZWF0ZUVuZFRpbWUodWludDY0KXZvaWQiCgltZXRob2QgImV4ZWN1dGVXaWxsKHVpbnQ2NCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggYWJpX3JvdXRlX2Fzc2V0T3B0SW4gYWJpX3JvdXRlX2NyZWF0ZVdpbGwgYWJpX3JvdXRlX2luY3JlYXRlRW5kVGltZSBhYmlfcm91dGVfZXhlY3V0ZVdpbGwKCWVycgoKcHJvY2Vzc19zdGF0aWNfdHVwbGVfZWxlbWVudDoKCXByb3RvIDQgMwoJZnJhbWVfZGlnIC00IC8vIHR1cGxlIGhlYWQKCWZyYW1lX2RpZyAtMSAvLyBlbGVtZW50Cgljb25jYXQKCWZyYW1lX2RpZyAtMyAvLyB0dXBsZSB0YWlsCglmcmFtZV9kaWcgLTIgLy8gaGVhZCBvZmZzZXQKCXJldHN1YgoKcHJvY2Vzc19keW5hbWljX3R1cGxlX2VsZW1lbnQ6Cglwcm90byA0IDMKCWZyYW1lX2RpZyAtNCAvLyB0dXBsZSBoZWFkCglmcmFtZV9kaWcgLTIgLy8gaGVhZCBvZmZzZXQKCWNvbmNhdAoJZnJhbWVfYnVyeSAtNCAvLyB0dXBsZSBoZWFkCglmcmFtZV9kaWcgLTEgLy8gZWxlbWVudAoJZHVwCglsZW4KCWZyYW1lX2RpZyAtMiAvLyBoZWFkIG9mZnNldAoJYnRvaQoJKwoJaXRvYgoJZXh0cmFjdCA2IDIKCWZyYW1lX2J1cnkgLTIgLy8gaGVhZCBvZmZzZXQKCWZyYW1lX2RpZyAtMyAvLyB0dXBsZSB0YWlsCglzd2FwCgljb25jYXQKCWZyYW1lX2J1cnkgLTMgLy8gdHVwbGUgdGFpbAoJZnJhbWVfZGlnIC00IC8vIHR1cGxlIGhlYWQKCWZyYW1lX2RpZyAtMyAvLyB0dXBsZSB0YWlsCglmcmFtZV9kaWcgLTIgLy8gaGVhZCBvZmZzZXQKCXJldHN1Yg==",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "Willexec",
    "desc": "",
    "methods": [
      {
        "name": "assetOptIn",
        "args": [
          {
            "name": "asset",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "createWill",
        "args": [
          {
            "name": "from",
            "type": "address",
            "desc": ""
          },
          {
            "name": "assets",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "assetsAmount",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "assetsTo",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "nativeAmount",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "nativeTo",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "endTime",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "increateEndTime",
        "args": [
          {
            "name": "willId",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "executeWill",
        "args": [
          {
            "name": "willId",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "createApplication",
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        },
        "args": []
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the Willexec smart contract.
 */
export type Willexec = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'assetOptIn(asset)void' | 'assetOptIn', {
      argsObj: {
        asset: number | bigint
      }
      argsTuple: [asset: number | bigint]
      returns: void
    }>
    & Record<'createWill(address,byte[],byte[],byte[],byte[],byte[],uint64)uint64' | 'createWill', {
      argsObj: {
        from: string
        assets: Uint8Array
        assetsAmount: Uint8Array
        assetsTo: Uint8Array
        nativeAmount: Uint8Array
        nativeTo: Uint8Array
        endTime: bigint | number
      }
      argsTuple: [from: string, assets: Uint8Array, assetsAmount: Uint8Array, assetsTo: Uint8Array, nativeAmount: Uint8Array, nativeTo: Uint8Array, endTime: bigint | number]
      returns: bigint
    }>
    & Record<'increateEndTime(uint64)void' | 'increateEndTime', {
      argsObj: {
        willId: bigint | number
      }
      argsTuple: [willId: bigint | number]
      returns: void
    }>
    & Record<'executeWill(uint64)void' | 'executeWill', {
      argsObj: {
        willId: bigint | number
      }
      argsTuple: [willId: bigint | number]
      returns: void
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'id'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type WillexecSig = keyof Willexec['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends WillexecSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Willexec smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends WillexecSig> = Willexec['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Willexec smart contract to the method's return type
 */
export type MethodReturn<TSignature extends WillexecSig> = Willexec['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type WillexecCreateCalls = (typeof WillexecCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type WillexecCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type WillexecDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: WillexecCreateCalls) => WillexecCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class WillexecCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Willexec smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the assetOptIn(asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static assetOptIn(args: MethodArgs<'assetOptIn(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'assetOptIn(asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the createWill(address,byte[],byte[],byte[],byte[],byte[],uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createWill(args: MethodArgs<'createWill(address,byte[],byte[],byte[],byte[],byte[],uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createWill(address,byte[],byte[],byte[],byte[],byte[],uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.from, args.assets, args.assetsAmount, args.assetsTo, args.nativeAmount, args.nativeTo, args.endTime],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the increateEndTime(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static increateEndTime(args: MethodArgs<'increateEndTime(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'increateEndTime(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.willId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the executeWill(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static executeWill(args: MethodArgs<'executeWill(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'executeWill(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.willId],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Willexec smart contract
 */
export class WillexecClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `WillexecClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Willexec['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Willexec smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: WillexecDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(WillexecCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Willexec smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'createApplication()void'>>> {
        return $this.mapReturnValue(await $this.appClient.create(WillexecCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Willexec smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the assetOptIn(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public assetOptIn(args: MethodArgs<'assetOptIn(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(WillexecCallFactory.assetOptIn(args, params))
  }

  /**
   * Calls the createWill(address,byte[],byte[],byte[],byte[],byte[],uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createWill(args: MethodArgs<'createWill(address,byte[],byte[],byte[],byte[],byte[],uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(WillexecCallFactory.createWill(args, params))
  }

  /**
   * Calls the increateEndTime(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public increateEndTime(args: MethodArgs<'increateEndTime(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(WillexecCallFactory.increateEndTime(args, params))
  }

  /**
   * Calls the executeWill(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public executeWill(args: MethodArgs<'executeWill(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(WillexecCallFactory.executeWill(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Willexec['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get id() {
        return WillexecClient.getIntegerState(state, 'id')
      },
    }
  }

  public compose(): WillexecComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      assetOptIn(args: MethodArgs<'assetOptIn(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.assetOptIn(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createWill(args: MethodArgs<'createWill(address,byte[],byte[],byte[],byte[],byte[],uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createWill(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      increateEndTime(args: MethodArgs<'increateEndTime(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.increateEndTime(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      executeWill(args: MethodArgs<'executeWill(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.executeWill(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as WillexecComposer
  }
}
export type WillexecComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the assetOptIn(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assetOptIn(args: MethodArgs<'assetOptIn(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): WillexecComposer<[...TReturns, MethodReturn<'assetOptIn(asset)void'>]>

  /**
   * Calls the createWill(address,byte[],byte[],byte[],byte[],byte[],uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createWill(args: MethodArgs<'createWill(address,byte[],byte[],byte[],byte[],byte[],uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): WillexecComposer<[...TReturns, MethodReturn<'createWill(address,byte[],byte[],byte[],byte[],byte[],uint64)uint64'>]>

  /**
   * Calls the increateEndTime(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  increateEndTime(args: MethodArgs<'increateEndTime(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): WillexecComposer<[...TReturns, MethodReturn<'increateEndTime(uint64)void'>]>

  /**
   * Calls the executeWill(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  executeWill(args: MethodArgs<'executeWill(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): WillexecComposer<[...TReturns, MethodReturn<'executeWill(uint64)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the Willexec smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): WillexecComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): WillexecComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<WillexecComposerResults<TReturns>>
}
export type WillexecComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
