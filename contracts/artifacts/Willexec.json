{
  "hints": {
    "assetOptIn(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createWill(address,byte[],byte[],byte[],byte[],byte[],uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "increateEndTime(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "executeWill(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "currentId": {
          "type": "uint64",
          "key": "id"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 9
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "Willexec",
    "desc": "",
    "methods": [
      {
        "name": "assetOptIn",
        "args": [
          {
            "name": "asset",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "createWill",
        "args": [
          {
            "name": "from",
            "type": "address",
            "desc": ""
          },
          {
            "name": "assets",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "assetsAmount",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "assetsTo",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "nativeAmount",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "nativeTo",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "endTime",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "increateEndTime",
        "args": [
          {
            "name": "willId",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "executeWill",
        "args": [
          {
            "name": "willId",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "createApplication",
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        },
        "args": []
      }
    ]
  }
}