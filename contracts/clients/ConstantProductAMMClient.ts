/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import { Algodv2, OnApplicationComplete, Transaction, TransactionWithSigner, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "set_governor(account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bootstrap(pay,asset,asset)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mint(axfer,axfer,asset,asset,asset)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burn(axfer,asset,asset,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "swap(axfer,asset,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "governor": {
          "type": "bytes",
          "key": "g"
        },
        "assetA": {
          "type": "uint64",
          "key": "a"
        },
        "assetB": {
          "type": "uint64",
          "key": "b"
        },
        "poolToken": {
          "type": "uint64",
          "key": "p"
        },
        "ratio": {
          "type": "uint64",
          "key": "r"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 4
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "ConstantProductAMM",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "set_governor",
        "args": [
          {
            "name": "governor",
            "type": "account",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "bootstrap",
        "args": [
          {
            "name": "seed",
            "type": "pay",
            "desc": ""
          },
          {
            "name": "aAsset",
            "type": "asset",
            "desc": ""
          },
          {
            "name": "bAsset",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "mint",
        "args": [
          {
            "name": "aXfer",
            "type": "axfer",
            "desc": ""
          },
          {
            "name": "bXfer",
            "type": "axfer",
            "desc": ""
          },
          {
            "name": "poolAsset",
            "type": "asset",
            "desc": ""
          },
          {
            "name": "aAsset",
            "type": "asset",
            "desc": ""
          },
          {
            "name": "bAsset",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "burn",
        "args": [
          {
            "name": "poolXfer",
            "type": "axfer",
            "desc": ""
          },
          {
            "name": "poolAsset",
            "type": "asset",
            "desc": ""
          },
          {
            "name": "aAsset",
            "type": "asset",
            "desc": ""
          },
          {
            "name": "bAsset",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "swap",
        "args": [
          {
            "name": "swapXfer",
            "type": "axfer",
            "desc": ""
          },
          {
            "name": "aAsset",
            "type": "asset",
            "desc": ""
          },
          {
            "name": "bAsset",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the ConstantProductAmm smart contract.
 */
export type ConstantProductAmm = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'set_governor(account)void' | 'set_governor', {
      argsObj: {
        governor: number | bigint
      }
      argsTuple: [governor: number | bigint]
      returns: void
    }>
    & Record<'bootstrap(pay,asset,asset)uint64' | 'bootstrap', {
      argsObj: {
        seed: TransactionToSign | Transaction | Promise<SendTransactionResult>
        aAsset: number | bigint
        bAsset: number | bigint
      }
      argsTuple: [seed: TransactionToSign | Transaction | Promise<SendTransactionResult>, aAsset: number | bigint, bAsset: number | bigint]
      returns: bigint
    }>
    & Record<'mint(axfer,axfer,asset,asset,asset)uint64' | 'mint', {
      argsObj: {
        aXfer: TransactionToSign | Transaction | Promise<SendTransactionResult>
        bXfer: TransactionToSign | Transaction | Promise<SendTransactionResult>
        poolAsset: number | bigint
        aAsset: number | bigint
        bAsset: number | bigint
      }
      argsTuple: [aXfer: TransactionToSign | Transaction | Promise<SendTransactionResult>, bXfer: TransactionToSign | Transaction | Promise<SendTransactionResult>, poolAsset: number | bigint, aAsset: number | bigint, bAsset: number | bigint]
      returns: bigint
    }>
    & Record<'burn(axfer,asset,asset,asset)void' | 'burn', {
      argsObj: {
        poolXfer: TransactionToSign | Transaction | Promise<SendTransactionResult>
        poolAsset: number | bigint
        aAsset: number | bigint
        bAsset: number | bigint
      }
      argsTuple: [poolXfer: TransactionToSign | Transaction | Promise<SendTransactionResult>, poolAsset: number | bigint, aAsset: number | bigint, bAsset: number | bigint]
      returns: void
    }>
    & Record<'swap(axfer,asset,asset)void' | 'swap', {
      argsObj: {
        swapXfer: TransactionToSign | Transaction | Promise<SendTransactionResult>
        aAsset: number | bigint
        bAsset: number | bigint
      }
      argsTuple: [swapXfer: TransactionToSign | Transaction | Promise<SendTransactionResult>, aAsset: number | bigint, bAsset: number | bigint]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'g'?: BinaryState
      'a'?: IntegerState
      'b'?: IntegerState
      'p'?: IntegerState
      'r'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type ConstantProductAmmSig = keyof ConstantProductAmm['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends ConstantProductAmmSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the ConstantProductAmm smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends ConstantProductAmmSig> = ConstantProductAmm['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the ConstantProductAmm smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ConstantProductAmmSig> = ConstantProductAmm['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type ConstantProductAmmCreateCalls = (typeof ConstantProductAmmCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type ConstantProductAmmCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type ConstantProductAmmDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: ConstantProductAmmCreateCalls) => ConstantProductAmmCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class ConstantProductAmmCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the ConstantProductAMM smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the set_governor(account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setGovernor(args: MethodArgs<'set_governor(account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_governor(account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.governor],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the bootstrap(pay,asset,asset)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(args: MethodArgs<'bootstrap(pay,asset,asset)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bootstrap(pay,asset,asset)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.seed, args.aAsset, args.bAsset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the mint(axfer,axfer,asset,asset,asset)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static mint(args: MethodArgs<'mint(axfer,axfer,asset,asset,asset)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'mint(axfer,axfer,asset,asset,asset)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.aXfer, args.bXfer, args.poolAsset, args.aAsset, args.bAsset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the burn(axfer,asset,asset,asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static burn(args: MethodArgs<'burn(axfer,asset,asset,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'burn(axfer,asset,asset,asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.poolXfer, args.poolAsset, args.aAsset, args.bAsset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the swap(axfer,asset,asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static swap(args: MethodArgs<'swap(axfer,asset,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'swap(axfer,asset,asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.swapXfer, args.aAsset, args.bAsset],
      ...params,
    }
  }
}

/**
 * A client to make calls to the ConstantProductAMM smart contract
 */
export class ConstantProductAmmClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `ConstantProductAmmClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof ConstantProductAmm['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the ConstantProductAMM smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: ConstantProductAmmDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(ConstantProductAmmCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the ConstantProductAMM smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'createApplication()void'>>> {
        return $this.mapReturnValue(await $this.appClient.create(ConstantProductAmmCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the ConstantProductAMM smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the set_governor(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setGovernor(args: MethodArgs<'set_governor(account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ConstantProductAmmCallFactory.setGovernor(args, params))
  }

  /**
   * Calls the bootstrap(pay,asset,asset)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bootstrap(args: MethodArgs<'bootstrap(pay,asset,asset)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ConstantProductAmmCallFactory.bootstrap(args, params))
  }

  /**
   * Calls the mint(axfer,axfer,asset,asset,asset)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public mint(args: MethodArgs<'mint(axfer,axfer,asset,asset,asset)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ConstantProductAmmCallFactory.mint(args, params))
  }

  /**
   * Calls the burn(axfer,asset,asset,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public burn(args: MethodArgs<'burn(axfer,asset,asset,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ConstantProductAmmCallFactory.burn(args, params))
  }

  /**
   * Calls the swap(axfer,asset,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public swap(args: MethodArgs<'swap(axfer,asset,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ConstantProductAmmCallFactory.swap(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<ConstantProductAmm['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get g() {
        return ConstantProductAmmClient.getBinaryState(state, 'g')
      },
      get a() {
        return ConstantProductAmmClient.getIntegerState(state, 'a')
      },
      get b() {
        return ConstantProductAmmClient.getIntegerState(state, 'b')
      },
      get p() {
        return ConstantProductAmmClient.getIntegerState(state, 'p')
      },
      get r() {
        return ConstantProductAmmClient.getIntegerState(state, 'r')
      },
    }
  }

  public compose(): ConstantProductAmmComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      setGovernor(args: MethodArgs<'set_governor(account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setGovernor(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      bootstrap(args: MethodArgs<'bootstrap(pay,asset,asset)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bootstrap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      mint(args: MethodArgs<'mint(axfer,axfer,asset,asset,asset)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.mint(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      burn(args: MethodArgs<'burn(axfer,asset,asset,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.burn(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      swap(args: MethodArgs<'swap(axfer,asset,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.swap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as ConstantProductAmmComposer
  }
}
export type ConstantProductAmmComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the set_governor(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setGovernor(args: MethodArgs<'set_governor(account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ConstantProductAmmComposer<[...TReturns, MethodReturn<'set_governor(account)void'>]>

  /**
   * Calls the bootstrap(pay,asset,asset)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(args: MethodArgs<'bootstrap(pay,asset,asset)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ConstantProductAmmComposer<[...TReturns, MethodReturn<'bootstrap(pay,asset,asset)uint64'>]>

  /**
   * Calls the mint(axfer,axfer,asset,asset,asset)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mint(args: MethodArgs<'mint(axfer,axfer,asset,asset,asset)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ConstantProductAmmComposer<[...TReturns, MethodReturn<'mint(axfer,axfer,asset,asset,asset)uint64'>]>

  /**
   * Calls the burn(axfer,asset,asset,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burn(args: MethodArgs<'burn(axfer,asset,asset,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ConstantProductAmmComposer<[...TReturns, MethodReturn<'burn(axfer,asset,asset,asset)void'>]>

  /**
   * Calls the swap(axfer,asset,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  swap(args: MethodArgs<'swap(axfer,asset,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ConstantProductAmmComposer<[...TReturns, MethodReturn<'swap(axfer,asset,asset)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the ConstantProductAMM smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): ConstantProductAmmComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): ConstantProductAmmComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<ConstantProductAmmComposerResults<TReturns>>
}
export type ConstantProductAmmComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
