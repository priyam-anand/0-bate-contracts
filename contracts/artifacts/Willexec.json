{
  "hints": {
    "assetOptIn(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createWill(address,byte[],byte[],byte[],byte[],byte[],uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "increateEndTime(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "executeWill(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "currentId": {
          "type": "uint64",
          "key": "id"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 9
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDkKCi8vIFRoaXMgVEVBTCB3YXMgZ2VuZXJhdGVkIGJ5IFRFQUxTY3JpcHQgdjAuNTkuMAovLyBodHRwczovL2dpdGh1Yi5jb20vYWxnb3JhbmRmb3VuZGF0aW9uL1RFQUxTY3JpcHQKCi8vIFRoaXMgY29udHJhY3QgaXMgY29tcGxpYW50IHdpdGggYW5kL29yIGltcGxlbWVudHMgdGhlIGZvbGxvd2luZyBBUkNzOiBbIEFSQzQgXQoKLy8gVGhlIGZvbGxvd2luZyB0ZW4gbGluZXMgb2YgVEVBTCBoYW5kbGUgaW5pdGlhbCBwcm9ncmFtIGZsb3cKLy8gVGhpcyBwYXR0ZXJuIGlzIHVzZWQgdG8gbWFrZSBpdCBlYXN5IGZvciBhbnlvbmUgdG8gcGFyc2UgdGhlIHN0YXJ0IG9mIHRoZSBwcm9ncmFtIGFuZCBkZXRlcm1pbmUgaWYgYSBzcGVjaWZpYyBhY3Rpb24gaXMgYWxsb3dlZAovLyBIZXJlLCBhY3Rpb24gcmVmZXJzIHRvIHRoZSBPbkNvbXBsZXRlIGluIGNvbWJpbmF0aW9uIHdpdGggd2hldGhlciB0aGUgYXBwIGlzIGJlaW5nIGNyZWF0ZWQgb3IgY2FsbGVkCi8vIEV2ZXJ5IHBvc3NpYmxlIGFjdGlvbiBmb3IgdGhpcyBjb250cmFjdCBpcyByZXByZXNlbnRlZCBpbiB0aGUgc3dpdGNoIHN0YXRlbWVudAovLyBJZiB0aGUgYWN0aW9uIGlzIG5vdCBpbXBsbWVudGVkIGluIHRoZSBjb250cmFjdCwgaXRzIHJlcHNlY3RpdmUgYnJhbmNoIHdpbGwgYmUgIk5PVF9JTVBMTUVOVEVEIiB3aGljaCBqdXN0IGNvbnRhaW5zICJlcnIiCnR4biBBcHBsaWNhdGlvbklECmludCAwCj4KaW50IDYKKgp0eG4gT25Db21wbGV0aW9uCisKc3dpdGNoIGNyZWF0ZV9Ob09wIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgY2FsbF9Ob09wCgpOT1RfSU1QTEVNRU5URUQ6CgllcnIKCnZlcmlmeU5hdGl2ZToKCXByb3RvIDYgMAoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjM0CgkvLyByb3VuZHMgPSBsZW4obmF0aXZlQW1vdW50KSAvIDgKCWZyYW1lX2RpZyAtMSAvLyBuYXRpdmVBbW91bnQ6IGJ5dGVzCglsZW4KCWludCA4CgkvCglmcmFtZV9idXJ5IC0zIC8vIHJvdW5kczogdWludDY0CgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6MzUKCS8vIGFzc2VydChyb3VuZHMgPT09IGxlbihuYXRpdmVUbykgLyAzMikKCWZyYW1lX2RpZyAtMyAvLyByb3VuZHM6IHVpbnQ2NAoJZnJhbWVfZGlnIC0yIC8vIG5hdGl2ZVRvOiBieXRlcwoJbGVuCglpbnQgMzIKCS8KCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czozNgoJLy8gdG90YWxDb3N0ID0KCS8vICAgICAgIENPU1RfUEVSX0JPWCArIC8vIGNvc3Qgb2YgYm94CgkvLyAgICAgICBNQVhfQk9YX1NJWkUgKiBDT1NUX1BFUl9CWVRFICsgLy8gY29zdCBvZiBkYXRhCgkvLyAgICAgICAyICogNjQgKiBDT1NUX1BFUl9CWVRFCglpbnQgMzMzMDUwMAoJZnJhbWVfYnVyeSAtNCAvLyB0b3RhbENvc3Q6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjQxCgkvLyBpID0gMAoJaW50IDAKCWZyYW1lX2J1cnkgLTUgLy8gaTogdWludDY0Cgpmb3JfMDoKCWZyYW1lX2RpZyAtNSAvLyBpOiB1aW50NjQKCWZyYW1lX2RpZyAtMyAvLyByb3VuZHM6IHVpbnQ2NAoJPAoJYnogZm9yXzBfZW5kCgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6NDIKCS8vIGN1cnJlbnRBbW91bnRJbkJ5dGVzID0gZXh0cmFjdDMobmF0aXZlQW1vdW50LCBpICogOCwgOCkKCWZyYW1lX2RpZyAtMSAvLyBuYXRpdmVBbW91bnQ6IGJ5dGVzCglmcmFtZV9kaWcgLTUgLy8gaTogdWludDY0CglpbnQgOAoJKgoJaW50IDgKCWV4dHJhY3QzCglmcmFtZV9idXJ5IC02IC8vIGN1cnJlbnRBbW91bnRJbkJ5dGVzOiBieXRlcwoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjQzCgkvLyB0b3RhbENvc3QgPSB0b3RhbENvc3QgKyBidG9pKGN1cnJlbnRBbW91bnRJbkJ5dGVzKQoJZnJhbWVfZGlnIC00IC8vIHRvdGFsQ29zdDogdWludDY0CglmcmFtZV9kaWcgLTYgLy8gY3VycmVudEFtb3VudEluQnl0ZXM6IGJ5dGVzCglidG9pCgkrCglmcmFtZV9idXJ5IC00IC8vIHRvdGFsQ29zdDogdWludDY0CgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6NDEKCS8vIGkgPSBpICsgMQoJZnJhbWVfZGlnIC01IC8vIGk6IHVpbnQ2NAoJaW50IDEKCSsKCWZyYW1lX2J1cnkgLTUgLy8gaTogdWludDY0CgliIGZvcl8wCgpmb3JfMF9lbmQ6CgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czo0NgoJLy8gdmVyaWZ5VHhuKHRoaXMudHhuR3JvdXBbMF0sIHsgcmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsIGFtb3VudDogeyBncmVhdGVyVGhhbkVxdWFsVG86IHRvdGFsQ29zdCB9IH0pCgkvLyB2ZXJpZnkgcmVjZWl2ZXIKCWludCAwCglndHhucyBSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYW1vdW50CglpbnQgMAoJZ3R4bnMgQW1vdW50CglmcmFtZV9kaWcgLTQgLy8gdG90YWxDb3N0OiB1aW50NjQKCT49Cglhc3NlcnQKCXJldHN1YgoKdmVyaWZ5QXNzZXRzOgoJcHJvdG8gMTQgMAoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjUwCgkvLyByb3VuZHMgPSBsZW4oYXNzZXRzQW1vdW50KSAvIDgKCWZyYW1lX2RpZyAtMSAvLyBhc3NldHNBbW91bnQ6IGJ5dGVzCglsZW4KCWludCA4CgkvCglmcmFtZV9idXJ5IC00IC8vIHJvdW5kczogdWludDY0CgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6NTEKCS8vIGFzc2VydChyb3VuZHMgPT09IGxlbihhc3NldHMpIC8gOCAmJiByb3VuZHMgPT09IGxlbihhc3NldHNUbykgLyAzMikKCWZyYW1lX2RpZyAtNCAvLyByb3VuZHM6IHVpbnQ2NAoJZnJhbWVfZGlnIC0zIC8vIGFzc2V0czogYnl0ZXMKCWxlbgoJaW50IDgKCS8KCT09CglkdXAKCWJ6IHNraXBfYW5kMAoJZnJhbWVfZGlnIC00IC8vIHJvdW5kczogdWludDY0CglmcmFtZV9kaWcgLTIgLy8gYXNzZXRzVG86IGJ5dGVzCglsZW4KCWludCAzMgoJLwoJPT0KCSYmCgpza2lwX2FuZDA6Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czo1MwoJLy8gaSA9IDAKCWludCAwCglmcmFtZV9idXJ5IC01IC8vIGk6IHVpbnQ2NAoKZm9yXzE6CglmcmFtZV9kaWcgLTUgLy8gaTogdWludDY0CglmcmFtZV9kaWcgLTQgLy8gcm91bmRzOiB1aW50NjQKCTwKCWJ6IGZvcl8xX2VuZAoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjU0CgkvLyBjdXJyZW50QXNzZXRJbkJ5dGVzID0gZXh0cmFjdDMoYXNzZXRzLCBpICogOCwgOCkKCWZyYW1lX2RpZyAtMyAvLyBhc3NldHM6IGJ5dGVzCglmcmFtZV9kaWcgLTUgLy8gaTogdWludDY0CglpbnQgOAoJKgoJaW50IDgKCWV4dHJhY3QzCglmcmFtZV9idXJ5IC02IC8vIGN1cnJlbnRBc3NldEluQnl0ZXM6IGJ5dGVzCgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6NTUKCS8vIGN1cnJlbnRBbW91bnRJbkJ5dGVzID0gZXh0cmFjdDMoYXNzZXRzQW1vdW50LCBpICogOCwgOCkKCWZyYW1lX2RpZyAtMSAvLyBhc3NldHNBbW91bnQ6IGJ5dGVzCglmcmFtZV9kaWcgLTUgLy8gaTogdWludDY0CglpbnQgOAoJKgoJaW50IDgKCWV4dHJhY3QzCglmcmFtZV9idXJ5IC03IC8vIGN1cnJlbnRBbW91bnRJbkJ5dGVzOiBieXRlcwoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjU3CgkvLyBjdXJyZW50QXNzZXQgPSBBc3NldC5mcm9tSUQoYnRvaShjdXJyZW50QXNzZXRJbkJ5dGVzKSkKCWZyYW1lX2RpZyAtNiAvLyBjdXJyZW50QXNzZXRJbkJ5dGVzOiBieXRlcwoJYnRvaQoJZnJhbWVfYnVyeSAtOCAvLyBjdXJyZW50QXNzZXQ6IGFzc2V0CgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6NTgKCS8vIGN1cnJlbnRBbW91bnQgPSBidG9pKGN1cnJlbnRBbW91bnRJbkJ5dGVzKQoJZnJhbWVfZGlnIC03IC8vIGN1cnJlbnRBbW91bnRJbkJ5dGVzOiBieXRlcwoJYnRvaQoJZnJhbWVfYnVyeSAtOSAvLyBjdXJyZW50QW1vdW50OiB1aW50NjQKCgkvLyBpZjBfY29uZGl0aW9uCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czo2MAoJLy8gdGhpcy5hc3NldHNIZWxwZXIoY3VycmVudEFzc2V0KS5leGlzdHMKCXR4bmEgQXBwbGljYXRpb25zIDAKCWZyYW1lX2RpZyAtOCAvLyBjdXJyZW50QXNzZXQ6IGFzc2V0CglpdG9iCglhcHBfZ2xvYmFsX2dldF9leAoJc3dhcAoJcG9wCglieiBpZjBfZWxzZQoKCS8vIGlmMF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czo2MQoJLy8gdmFsdWUgPSB0aGlzLmFzc2V0c0hlbHBlcihjdXJyZW50QXNzZXQpLnZhbHVlICsgY3VycmVudEFtb3VudAoJZnJhbWVfZGlnIC04IC8vIGN1cnJlbnRBc3NldDogYXNzZXQKCWl0b2IKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgLTkgLy8gY3VycmVudEFtb3VudDogdWludDY0CgkrCglmcmFtZV9idXJ5IC0xMCAvLyB2YWx1ZTogdWludDY0CgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6NjIKCS8vIHRoaXMuYXNzZXRzSGVscGVyKGN1cnJlbnRBc3NldCkudmFsdWUgPSB2YWx1ZQoJZnJhbWVfZGlnIC04IC8vIGN1cnJlbnRBc3NldDogYXNzZXQKCWl0b2IKCWZyYW1lX2RpZyAtMTAgLy8gdmFsdWU6IHVpbnQ2NAoJYXBwX2dsb2JhbF9wdXQKCWIgaWYwX2VuZAoKaWYwX2Vsc2U6CgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czo2NAoJLy8gdGhpcy5hc3NldHNIZWxwZXIoY3VycmVudEFzc2V0KS52YWx1ZSA9IGN1cnJlbnRBbW91bnQKCWZyYW1lX2RpZyAtOCAvLyBjdXJyZW50QXNzZXQ6IGFzc2V0CglpdG9iCglmcmFtZV9kaWcgLTkgLy8gY3VycmVudEFtb3VudDogdWludDY0CglhcHBfZ2xvYmFsX3B1dAoKaWYwX2VuZDoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjUzCgkvLyBpID0gaSArIDEKCWZyYW1lX2RpZyAtNSAvLyBpOiB1aW50NjQKCWludCAxCgkrCglmcmFtZV9idXJ5IC01IC8vIGk6IHVpbnQ2NAoJYiBmb3JfMQoKZm9yXzFfZW5kOgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6NjgKCS8vIGkgPSAwCglpbnQgMAoJZnJhbWVfYnVyeSAtMTEgLy8gaTogdWludDY0Cgpmb3JfMjoKCWZyYW1lX2RpZyAtMTEgLy8gaTogdWludDY0CglmcmFtZV9kaWcgLTQgLy8gcm91bmRzOiB1aW50NjQKCTwKCWJ6IGZvcl8yX2VuZAoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjY5CgkvLyBjdXJyZW50QXNzZXRJbkJ5dGVzID0gZXh0cmFjdDMoYXNzZXRzLCBpICogOCwgOCkKCWZyYW1lX2RpZyAtMyAvLyBhc3NldHM6IGJ5dGVzCglmcmFtZV9kaWcgLTExIC8vIGk6IHVpbnQ2NAoJaW50IDgKCSoKCWludCA4CglleHRyYWN0MwoJZnJhbWVfYnVyeSAtMTIgLy8gY3VycmVudEFzc2V0SW5CeXRlczogYnl0ZXMKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czo3MAoJLy8gY3VycmVudEFzc2V0ID0gQXNzZXQuZnJvbUlEKGJ0b2koY3VycmVudEFzc2V0SW5CeXRlcykpCglmcmFtZV9kaWcgLTEyIC8vIGN1cnJlbnRBc3NldEluQnl0ZXM6IGJ5dGVzCglidG9pCglmcmFtZV9idXJ5IC0xMyAvLyBjdXJyZW50QXNzZXQ6IGFzc2V0CgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6NzEKCS8vIHZhbHVlID0gdGhpcy5hc3NldHNIZWxwZXIoY3VycmVudEFzc2V0KS52YWx1ZQoJZnJhbWVfZGlnIC0xMyAvLyBjdXJyZW50QXNzZXQ6IGFzc2V0CglpdG9iCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfYnVyeSAtMTQgLy8gdmFsdWU6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjczCgkvLyB2ZXJpZnlUeG4odGhpcy50eG5Hcm91cFtpICsgMV0sIHsKCS8vICAgICAgICAgeGZlckFzc2V0OiBjdXJyZW50QXNzZXQsCgkvLyAgICAgICAgIGFzc2V0QW1vdW50OiB7IGdyZWF0ZXJUaGFuRXF1YWxUbzogdmFsdWUgfSwKCS8vICAgICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgIH0pCglmcmFtZV9kaWcgLTExIC8vIGk6IHVpbnQ2NAoJaW50IDEKCSsKCXN0b3JlIDggLy8gdmVyaWZ5VHhuIGluZGV4CgoJLy8gdmVyaWZ5IHhmZXJBc3NldAoJbG9hZCA4IC8vIHZlcmlmeVR4biBpbmRleAoJZ3R4bnMgWGZlckFzc2V0CglmcmFtZV9kaWcgLTEzIC8vIGN1cnJlbnRBc3NldDogYXNzZXQKCT09Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYXNzZXRBbW91bnQKCWxvYWQgOCAvLyB2ZXJpZnlUeG4gaW5kZXgKCWd0eG5zIEFzc2V0QW1vdW50CglmcmFtZV9kaWcgLTE0IC8vIHZhbHVlOiB1aW50NjQKCT49Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYXNzZXRSZWNlaXZlcgoJbG9hZCA4IC8vIHZlcmlmeVR4biBpbmRleAoJZ3R4bnMgQXNzZXRSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czo3OQoJLy8gdGhpcy5hc3NldHNIZWxwZXIoY3VycmVudEFzc2V0KS5kZWxldGUoKQoJZnJhbWVfZGlnIC0xMyAvLyBjdXJyZW50QXNzZXQ6IGFzc2V0CglpdG9iCglhcHBfZ2xvYmFsX2RlbAoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjY4CgkvLyBpID0gaSArIDEKCWZyYW1lX2RpZyAtMTEgLy8gaTogdWludDY0CglpbnQgMQoJKwoJZnJhbWVfYnVyeSAtMTEgLy8gaTogdWludDY0CgliIGZvcl8yCgpmb3JfMl9lbmQ6CglyZXRzdWIKCmNyZWF0ZVdpbGxTYW5pdHlDaGVja3M6Cglwcm90byA2IDAKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czo5MQoJLy8gdGhpcy52ZXJpZnlOYXRpdmUobmF0aXZlQW1vdW50LCBuYXRpdmVUbykKCWJ5dGUgMHg7IGR1cG4gMyAvLyBwdXNoIGVtcHR5IGJ5dGVzIHRvIGZpbGwgdGhlIHN0YWNrIGZyYW1lIGZvciB0aGlzIHN1YnJvdXRpbmUncyBsb2NhbCB2YXJpYWJsZXMKCWZyYW1lX2RpZyAtMiAvLyBuYXRpdmVUbzogYnl0ZXMKCWZyYW1lX2RpZyAtMSAvLyBuYXRpdmVBbW91bnQ6IGJ5dGVzCgljYWxsc3ViIHZlcmlmeU5hdGl2ZQoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjkyCgkvLyB0aGlzLnZlcmlmeUFzc2V0cyhhc3NldHNBbW91bnQsIGFzc2V0c1RvLCBhc3NldHMpCglieXRlIDB4OyBkdXBuIDEwIC8vIHB1c2ggZW1wdHkgYnl0ZXMgdG8gZmlsbCB0aGUgc3RhY2sgZnJhbWUgZm9yIHRoaXMgc3Vicm91dGluZSdzIGxvY2FsIHZhcmlhYmxlcwoJZnJhbWVfZGlnIC01IC8vIGFzc2V0czogYnl0ZXMKCWZyYW1lX2RpZyAtNCAvLyBhc3NldHNUbzogYnl0ZXMKCWZyYW1lX2RpZyAtMyAvLyBhc3NldHNBbW91bnQ6IGJ5dGVzCgljYWxsc3ViIHZlcmlmeUFzc2V0cwoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjkzCgkvLyBhc3NlcnQoZW5kVGltZSA+IGdsb2JhbHMubGF0ZXN0VGltZXN0YW1wKQoJZnJhbWVfZGlnIC02IC8vIGVuZFRpbWU6IHVpbnQ2NAoJZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAoJPgoJYXNzZXJ0CglyZXRzdWIKCnNlbmROYXRpdmU6Cglwcm90byAyIDAKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czo5NwoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgYW1vdW50OiBhbW91bnQsCgkvLyAgICAgICByZWNlaXZlcjogdG8sCgkvLyAgICAgICBmZWU6IDEwMDAsCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBwYXkKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czo5OAoJLy8gYW1vdW50OiBhbW91bnQKCWZyYW1lX2RpZyAtMiAvLyBhbW91bnQ6IHVpbnQ2NAoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czo5OQoJLy8gcmVjZWl2ZXI6IHRvCglmcmFtZV9kaWcgLTEgLy8gdG86IGFkZHJlc3MKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czoxMDAKCS8vIGZlZTogMTAwMAoJaW50IDEwMDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJcmV0c3ViCgpzZW5kQXNzZXQ6Cglwcm90byAzIDAKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czoxMDUKCS8vIHNlbmRBc3NldFRyYW5zZmVyKHsKCS8vICAgICAgIHhmZXJBc3NldDogYXNzZXQsCgkvLyAgICAgICBhc3NldEFtb3VudDogYW1vdW50LAoJLy8gICAgICAgYXNzZXRSZWNlaXZlcjogdG8sCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBheGZlcgoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjEwNgoJLy8geGZlckFzc2V0OiBhc3NldAoJZnJhbWVfZGlnIC0xIC8vIGFzc2V0OiBhc3NldAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czoxMDcKCS8vIGFzc2V0QW1vdW50OiBhbW91bnQKCWZyYW1lX2RpZyAtMyAvLyBhbW91bnQ6IHVpbnQ2NAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjEwOAoJLy8gYXNzZXRSZWNlaXZlcjogdG8KCWZyYW1lX2RpZyAtMiAvLyB0bzogYWRkcmVzcwoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJcmV0c3ViCgpnZXRDdXJyZW50SWQ6Cglwcm90byAwIDEKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czoxMTMKCS8vIHJldHVybiB0aGlzLmN1cnJlbnRJZC52YWx1ZTsKCWJ5dGUgMHg2OTY0IC8vICJpZCIKCWFwcF9nbG9iYWxfZ2V0CglyZXRzdWIKCmluY3JlbWVudEN1cnJlbnRJZDoKCXByb3RvIDAgMAoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjExNwoJLy8gdGhpcy5jdXJyZW50SWQudmFsdWUgPSB0aGlzLmdldEN1cnJlbnRJZCgpICsgMQoJYnl0ZSAweDY5NjQgLy8gImlkIgoJY2FsbHN1YiBnZXRDdXJyZW50SWQKCWludCAxCgkrCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBhc3NldE9wdEluKGFzc2V0KXZvaWQKYWJpX3JvdXRlX2Fzc2V0T3B0SW46CgkvLyBhc3NldDogYXNzZXQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCXR4bmFzIEFzc2V0cwoKCS8vIGV4ZWN1dGUgYXNzZXRPcHRJbihhc3NldCl2b2lkCgljYWxsc3ViIGFzc2V0T3B0SW4KCWludCAxCglyZXR1cm4KCmFzc2V0T3B0SW46Cglwcm90byAxIDAKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czoxMjEKCS8vIHZlcmlmeVR4bih0aGlzLnR4biwgeyBzZW5kZXI6IHRoaXMuYXBwLmNyZWF0b3IgfSkKCS8vIHZlcmlmeSBzZW5kZXIKCXR4biBTZW5kZXIKCXR4bmEgQXBwbGljYXRpb25zIDAKCWFwcF9wYXJhbXNfZ2V0IEFwcENyZWF0b3IKCWFzc2VydAoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjEyMgoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgIHhmZXJBc3NldDogYXNzZXQsCgkvLyAgICAgICBhc3NldEFtb3VudDogMCwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6MTIzCgkvLyBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6MTI0CgkvLyB4ZmVyQXNzZXQ6IGFzc2V0CglmcmFtZV9kaWcgLTEgLy8gYXNzZXQ6IGFzc2V0CglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjEyNQoJLy8gYXNzZXRBbW91bnQ6IDAKCWludCAwCglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJcmV0c3ViCgovLyBjcmVhdGVXaWxsKHVpbnQ2NCxieXRlcyxieXRlcyxieXRlcyxieXRlcyxieXRlcyxhZGRyZXNzKXVpbnQ2NAphYmlfcm91dGVfY3JlYXRlV2lsbDoKCWJ5dGUgMHg7IGR1cCAvLyBwdXNoIGVtcHR5IGJ5dGVzIHRvIGZpbGwgdGhlIHN0YWNrIGZyYW1lIGZvciB0aGlzIHN1YnJvdXRpbmUncyBsb2NhbCB2YXJpYWJsZXMKCgkvLyBlbmRUaW1lOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDcKCWJ0b2kKCgkvLyBuYXRpdmVUbzogYnl0ZVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyA2CglleHRyYWN0IDIgMAoKCS8vIG5hdGl2ZUFtb3VudDogYnl0ZVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyA1CglleHRyYWN0IDIgMAoKCS8vIGFzc2V0c1RvOiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDQKCWV4dHJhY3QgMiAwCgoJLy8gYXNzZXRzQW1vdW50OiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWV4dHJhY3QgMiAwCgoJLy8gYXNzZXRzOiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWV4dHJhY3QgMiAwCgoJLy8gZnJvbTogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgY3JlYXRlV2lsbCh1aW50NjQsYnl0ZXMsYnl0ZXMsYnl0ZXMsYnl0ZXMsYnl0ZXMsYWRkcmVzcyl1aW50NjQKCWNhbGxzdWIgY3JlYXRlV2lsbAoJaW50IDEKCXJldHVybgoKY3JlYXRlV2lsbDoKCXByb3RvIDkgMAoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjEzOQoJLy8gdGhpcy5jcmVhdGVXaWxsU2FuaXR5Q2hlY2tzKG5hdGl2ZUFtb3VudCwgbmF0aXZlVG8sIGFzc2V0c0Ftb3VudCwgYXNzZXRzVG8sIGFzc2V0cywgZW5kVGltZSkKCWZyYW1lX2RpZyAtNyAvLyBlbmRUaW1lOiB1aW50NjQKCWZyYW1lX2RpZyAtMiAvLyBhc3NldHM6IGJ5dGVzCglmcmFtZV9kaWcgLTQgLy8gYXNzZXRzVG86IGJ5dGVzCglmcmFtZV9kaWcgLTMgLy8gYXNzZXRzQW1vdW50OiBieXRlcwoJZnJhbWVfZGlnIC02IC8vIG5hdGl2ZVRvOiBieXRlcwoJZnJhbWVfZGlnIC01IC8vIG5hdGl2ZUFtb3VudDogYnl0ZXMKCWNhbGxzdWIgY3JlYXRlV2lsbFNhbml0eUNoZWNrcwoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjE0MgoJLy8gdGhpcy5pbmNyZW1lbnRDdXJyZW50SWQoKQoJY2FsbHN1YiBpbmNyZW1lbnRDdXJyZW50SWQKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czoxNDMKCS8vIGlkID0gdGhpcy5nZXRDdXJyZW50SWQoKQoJY2FsbHN1YiBnZXRDdXJyZW50SWQKCWZyYW1lX2J1cnkgLTggLy8gaWQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjE0NQoJLy8gd2lsbDogV2lsbCA9IHsKCS8vICAgICAgIGZyb206IGZyb20sCgkvLyAgICAgICBpZDogaWQsCgkvLyAgICAgICBhc3NldHM6IGFzc2V0cywKCS8vICAgICAgIGFzc2V0c0Ftb3VudDogYXNzZXRzQW1vdW50LAoJLy8gICAgICAgYXNzZXRzVG86IGFzc2V0c1RvLAoJLy8gICAgICAgbmF0aXZlQW1vdW50OiBuYXRpdmVBbW91bnQsCgkvLyAgICAgICBuYXRpdmVUbzogbmF0aXZlVG8sCgkvLyAgICAgICBlbmRUaW1lOiBlbmRUaW1lLAoJLy8gICAgIH0KCWJ5dGUgMHggLy8gaW5pdGlhbCBoZWFkCglieXRlIDB4IC8vIGluaXRpYWwgdGFpbAoJYnl0ZSAweDAwM2EgLy8gaW5pdGlhbCBoZWFkIG9mZnNldAoJZnJhbWVfZGlnIC0xIC8vIGZyb206IGFkZHJlc3MKCWNhbGxzdWIgcHJvY2Vzc19zdGF0aWNfdHVwbGVfZWxlbWVudAoJZnJhbWVfZGlnIC04IC8vIGlkOiB1aW50NjQKCWl0b2IKCWNhbGxzdWIgcHJvY2Vzc19zdGF0aWNfdHVwbGVfZWxlbWVudAoJZnJhbWVfZGlnIC0yIC8vIGFzc2V0czogYnl0ZXMKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CgljYWxsc3ViIHByb2Nlc3NfZHluYW1pY190dXBsZV9lbGVtZW50CglmcmFtZV9kaWcgLTMgLy8gYXNzZXRzQW1vdW50OiBieXRlcwoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWNhbGxzdWIgcHJvY2Vzc19keW5hbWljX3R1cGxlX2VsZW1lbnQKCWZyYW1lX2RpZyAtNCAvLyBhc3NldHNUbzogYnl0ZXMKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CgljYWxsc3ViIHByb2Nlc3NfZHluYW1pY190dXBsZV9lbGVtZW50CglmcmFtZV9kaWcgLTUgLy8gbmF0aXZlQW1vdW50OiBieXRlcwoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWNhbGxzdWIgcHJvY2Vzc19keW5hbWljX3R1cGxlX2VsZW1lbnQKCWZyYW1lX2RpZyAtNiAvLyBuYXRpdmVUbzogYnl0ZXMKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CgljYWxsc3ViIHByb2Nlc3NfZHluYW1pY190dXBsZV9lbGVtZW50CglmcmFtZV9kaWcgLTcgLy8gZW5kVGltZTogdWludDY0CglpdG9iCgljYWxsc3ViIHByb2Nlc3Nfc3RhdGljX3R1cGxlX2VsZW1lbnQKCXBvcCAvLyBwb3AgaGVhZCBvZmZzZXQKCWNvbmNhdCAvLyBjb25jYXQgaGVhZCBhbmQgdGFpbAoJZnJhbWVfYnVyeSAtOSAvLyB3aWxsOiBXaWxsCgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6MTU2CgkvLyB0aGlzLndpbGxzKHRoaXMuY3VycmVudElkLnZhbHVlKS52YWx1ZSA9IHdpbGwKCWJ5dGUgMHg2OTY0IC8vICJpZCIKCWFwcF9nbG9iYWxfZ2V0CglpdG9iCglkdXAKCWJveF9kZWwKCXBvcAoJZnJhbWVfZGlnIC05IC8vIHdpbGw6IFdpbGwKCWJveF9wdXQKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czoxNTgKCS8vIHJldHVybiBpZDsKCWZyYW1lX2RpZyAtOCAvLyBpZDogdWludDY0CglpdG9iCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCi8vIGluY3JlYXRlRW5kVGltZSh1aW50NjQpdm9pZAphYmlfcm91dGVfaW5jcmVhdGVFbmRUaW1lOgoJYnl0ZSAweDsgZHVwIC8vIHB1c2ggZW1wdHkgYnl0ZXMgdG8gZmlsbCB0aGUgc3RhY2sgZnJhbWUgZm9yIHRoaXMgc3Vicm91dGluZSdzIGxvY2FsIHZhcmlhYmxlcwoKCS8vIHdpbGxJZDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBpbmNyZWF0ZUVuZFRpbWUodWludDY0KXZvaWQKCWNhbGxzdWIgaW5jcmVhdGVFbmRUaW1lCglpbnQgMQoJcmV0dXJuCgppbmNyZWF0ZUVuZFRpbWU6Cglwcm90byAzIDAKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czoxNjIKCS8vIHdpbGwgPSB0aGlzLndpbGxzKHdpbGxJZCkudmFsdWUKCWZyYW1lX2RpZyAtMSAvLyB3aWxsSWQ6IHVpbnQ2NAoJaXRvYgoJZnJhbWVfYnVyeSAtMiAvLyBzdG9yYWdlIGtleS8vd2lsbAoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjE2MwoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gd2lsbC5mcm9tKQoJdHhuIFNlbmRlcgoJZnJhbWVfZGlnIC0yIC8vIHN0b3JhZ2Uga2V5Ly93aWxsCglib3hfZ2V0Cglhc3NlcnQKCXN0b3JlIDAgLy8gZnVsbCBhcnJheQoJbG9hZCAwIC8vIGZ1bGwgYXJyYXkKCWV4dHJhY3QgMCAzMgoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjE2NAoJLy8gY3VycmVudEVuZFRpbWUgPSB0aGlzLndpbGxzKHdpbGxJZCkudmFsdWUuZW5kVGltZQoJZnJhbWVfZGlnIC0xIC8vIHdpbGxJZDogdWludDY0CglpdG9iCglib3hfZ2V0Cglhc3NlcnQKCXN0b3JlIDAgLy8gZnVsbCBhcnJheQoJbG9hZCAwIC8vIGZ1bGwgYXJyYXkKCWV4dHJhY3QgNTAgOAoJYnRvaQoJZnJhbWVfYnVyeSAtMyAvLyBjdXJyZW50RW5kVGltZTogdWludDY0CgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6MTY1CgkvLyB0aGlzLndpbGxzKHdpbGxJZCkudmFsdWUuZW5kVGltZSA9IGN1cnJlbnRFbmRUaW1lICsgT05FX0RBWSAqIDM2NQoJZnJhbWVfZGlnIC0xIC8vIHdpbGxJZDogdWludDY0CglpdG9iCglib3hfZ2V0Cglhc3NlcnQKCXN0b3JlIDAgLy8gZnVsbCBhcnJheQoJbG9hZCAwIC8vIGZ1bGwgYXJyYXkKCWludCA1MAoJZnJhbWVfZGlnIC0zIC8vIGN1cnJlbnRFbmRUaW1lOiB1aW50NjQKCWludCAzMTUzNjAwMAoJKwoJaXRvYgoJcmVwbGFjZTMKCWZyYW1lX2RpZyAtMSAvLyB3aWxsSWQ6IHVpbnQ2NAoJaXRvYgoJZHVwCglib3hfZGVsCglwb3AKCXN3YXAKCWJveF9wdXQKCXJldHN1YgoKLy8gZXhlY3V0ZVdpbGwodWludDY0KXZvaWQKYWJpX3JvdXRlX2V4ZWN1dGVXaWxsOgoJYnl0ZSAweDsgZHVwbiA4IC8vIHB1c2ggZW1wdHkgYnl0ZXMgdG8gZmlsbCB0aGUgc3RhY2sgZnJhbWUgZm9yIHRoaXMgc3Vicm91dGluZSdzIGxvY2FsIHZhcmlhYmxlcwoKCS8vIHdpbGxJZDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBleGVjdXRlV2lsbCh1aW50NjQpdm9pZAoJY2FsbHN1YiBleGVjdXRlV2lsbAoJaW50IDEKCXJldHVybgoKZXhlY3V0ZVdpbGw6Cglwcm90byAxMCAwCgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6MTY5CgkvLyB3aWxsID0gdGhpcy53aWxscyh3aWxsSWQpLnZhbHVlCglmcmFtZV9kaWcgLTEgLy8gd2lsbElkOiB1aW50NjQKCWl0b2IKCWZyYW1lX2J1cnkgLTIgLy8gc3RvcmFnZSBrZXkvL3dpbGwKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czoxNzEKCS8vIGFzc2VydChnbG9iYWxzLmxhdGVzdFRpbWVzdGFtcCA+PSB3aWxsLmVuZFRpbWUpCglnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCglmcmFtZV9kaWcgLTIgLy8gc3RvcmFnZSBrZXkvL3dpbGwKCWJveF9nZXQKCWFzc2VydAoJc3RvcmUgMCAvLyBmdWxsIGFycmF5Cglsb2FkIDAgLy8gZnVsbCBhcnJheQoJZXh0cmFjdCA1MCA4CglidG9pCgk+PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6MTc0CgkvLyByb3VuZHMgPSBsZW4od2lsbC5uYXRpdmVBbW91bnQpIC8gOAoJZnJhbWVfZGlnIC0yIC8vIHN0b3JhZ2Uga2V5Ly93aWxsCglib3hfZ2V0Cglhc3NlcnQKCXN0b3JlIDAgLy8gZnVsbCBhcnJheQoJaW50IDQ2Cglsb2FkIDAgLy8gZnVsbCBhcnJheQoJbG9hZCAwIC8vIGZ1bGwgYXJyYXkKCXVuY292ZXIgMgoJZXh0cmFjdF91aW50MTYKCWR1cCAvLyBkdXBsaWNhdGUgc3RhcnQgb2YgZWxlbWVudAoJbG9hZCAwIC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWV4dHJhY3RfdWludDE2IC8vIGdldCBudW1iZXIgb2YgZWxlbWVudHMKCWludCAxIC8vIGdldCB0eXBlIGxlbmd0aAoJKiAvLyBtdWx0aXBseSBieSB0eXBlIGxlbmd0aAoJaW50IDIKCSsgLy8gYWRkIHR3byBmb3IgbGVuZ3RoCglleHRyYWN0MwoJZXh0cmFjdCAyIDAKCWxlbgoJaW50IDgKCS8KCWZyYW1lX2J1cnkgLTMgLy8gcm91bmRzOiB1aW50NjQKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czoxNzUKCS8vIGkgPSAwCglpbnQgMAoJZnJhbWVfYnVyeSAtNCAvLyBpOiB1aW50NjQKCmZvcl8zOgoJZnJhbWVfZGlnIC00IC8vIGk6IHVpbnQ2NAoJZnJhbWVfZGlnIC0zIC8vIHJvdW5kczogdWludDY0Cgk8CglieiBmb3JfM19lbmQKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czoxNzYKCS8vIGN1cnJlbnRBbW91bnQgPSBidG9pKGV4dHJhY3QzKHdpbGwubmF0aXZlQW1vdW50LCBpICogOCwgOCkpCglmcmFtZV9kaWcgLTIgLy8gc3RvcmFnZSBrZXkvL3dpbGwKCWJveF9nZXQKCWFzc2VydAoJc3RvcmUgMCAvLyBmdWxsIGFycmF5CglpbnQgNDYKCWxvYWQgMCAvLyBmdWxsIGFycmF5Cglsb2FkIDAgLy8gZnVsbCBhcnJheQoJdW5jb3ZlciAyCglleHRyYWN0X3VpbnQxNgoJZHVwIC8vIGR1cGxpY2F0ZSBzdGFydCBvZiBlbGVtZW50Cglsb2FkIDAgLy8gZnVsbCBhcnJheQoJc3dhcAoJZXh0cmFjdF91aW50MTYgLy8gZ2V0IG51bWJlciBvZiBlbGVtZW50cwoJaW50IDEgLy8gZ2V0IHR5cGUgbGVuZ3RoCgkqIC8vIG11bHRpcGx5IGJ5IHR5cGUgbGVuZ3RoCglpbnQgMgoJKyAvLyBhZGQgdHdvIGZvciBsZW5ndGgKCWV4dHJhY3QzCglleHRyYWN0IDIgMAoJZnJhbWVfZGlnIC00IC8vIGk6IHVpbnQ2NAoJaW50IDgKCSoKCWludCA4CglleHRyYWN0MwoJYnRvaQoJZnJhbWVfYnVyeSAtNSAvLyBjdXJyZW50QW1vdW50OiB1aW50NjQKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czoxNzcKCS8vIGN1cnJlbnRUbyA9IEFkZHJlc3MuZnJvbUJ5dGVzKGV4dHJhY3QzKHdpbGwubmF0aXZlVG8sIGkgKiAzMiwgMzIpKQoJZnJhbWVfZGlnIC0yIC8vIHN0b3JhZ2Uga2V5Ly93aWxsCglib3hfZ2V0Cglhc3NlcnQKCXN0b3JlIDAgLy8gZnVsbCBhcnJheQoJaW50IDQ4Cglsb2FkIDAgLy8gZnVsbCBhcnJheQoJbG9hZCAwIC8vIGZ1bGwgYXJyYXkKCXVuY292ZXIgMgoJZXh0cmFjdF91aW50MTYKCWR1cCAvLyBkdXBsaWNhdGUgc3RhcnQgb2YgZWxlbWVudAoJbG9hZCAwIC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWV4dHJhY3RfdWludDE2IC8vIGdldCBudW1iZXIgb2YgZWxlbWVudHMKCWludCAxIC8vIGdldCB0eXBlIGxlbmd0aAoJKiAvLyBtdWx0aXBseSBieSB0eXBlIGxlbmd0aAoJaW50IDIKCSsgLy8gYWRkIHR3byBmb3IgbGVuZ3RoCglleHRyYWN0MwoJZXh0cmFjdCAyIDAKCWZyYW1lX2RpZyAtNCAvLyBpOiB1aW50NjQKCWludCAzMgoJKgoJaW50IDMyCglleHRyYWN0MwoJZnJhbWVfYnVyeSAtNiAvLyBjdXJyZW50VG86IGFkZHJlc3MKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czoxNzkKCS8vIHRoaXMuc2VuZE5hdGl2ZShjdXJyZW50VG8sIGN1cnJlbnRBbW91bnQpCglmcmFtZV9kaWcgLTUgLy8gY3VycmVudEFtb3VudDogdWludDY0CglmcmFtZV9kaWcgLTYgLy8gY3VycmVudFRvOiBhZGRyZXNzCgljYWxsc3ViIHNlbmROYXRpdmUKCgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czoxNzUKCS8vIGkgPSBpICsgMQoJZnJhbWVfZGlnIC00IC8vIGk6IHVpbnQ2NAoJaW50IDEKCSsKCWZyYW1lX2J1cnkgLTQgLy8gaTogdWludDY0CgliIGZvcl8zCgpmb3JfM19lbmQ6CgkvLyBjb250cmFjdHMvV2lsbEV4ZWMuYWxnby50czoxODMKCS8vIHJvdW5kcyA9IGxlbih3aWxsLmFzc2V0cykgLyAzMgoJZnJhbWVfZGlnIC0yIC8vIHN0b3JhZ2Uga2V5Ly93aWxsCglib3hfZ2V0Cglhc3NlcnQKCXN0b3JlIDAgLy8gZnVsbCBhcnJheQoJaW50IDQwCglsb2FkIDAgLy8gZnVsbCBhcnJheQoJbG9hZCAwIC8vIGZ1bGwgYXJyYXkKCXVuY292ZXIgMgoJZXh0cmFjdF91aW50MTYKCWR1cCAvLyBkdXBsaWNhdGUgc3RhcnQgb2YgZWxlbWVudAoJbG9hZCAwIC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWV4dHJhY3RfdWludDE2IC8vIGdldCBudW1iZXIgb2YgZWxlbWVudHMKCWludCAxIC8vIGdldCB0eXBlIGxlbmd0aAoJKiAvLyBtdWx0aXBseSBieSB0eXBlIGxlbmd0aAoJaW50IDIKCSsgLy8gYWRkIHR3byBmb3IgbGVuZ3RoCglleHRyYWN0MwoJZXh0cmFjdCAyIDAKCWxlbgoJaW50IDMyCgkvCglmcmFtZV9idXJ5IC0zIC8vIHJvdW5kczogdWludDY0CgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6MTg0CgkvLyBpID0gMAoJaW50IDAKCWZyYW1lX2J1cnkgLTcgLy8gaTogdWludDY0Cgpmb3JfNDoKCWZyYW1lX2RpZyAtNyAvLyBpOiB1aW50NjQKCWZyYW1lX2RpZyAtMyAvLyByb3VuZHM6IHVpbnQ2NAoJPAoJYnogZm9yXzRfZW5kCgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6MTg1CgkvLyBjdXJyZW50QXNzZXQgPSBBc3NldC5mcm9tSUQoYnRvaShleHRyYWN0Myh3aWxsLmFzc2V0cywgaSAqIDMyLCAzMikpKQoJZnJhbWVfZGlnIC0yIC8vIHN0b3JhZ2Uga2V5Ly93aWxsCglib3hfZ2V0Cglhc3NlcnQKCXN0b3JlIDAgLy8gZnVsbCBhcnJheQoJaW50IDQwCglsb2FkIDAgLy8gZnVsbCBhcnJheQoJbG9hZCAwIC8vIGZ1bGwgYXJyYXkKCXVuY292ZXIgMgoJZXh0cmFjdF91aW50MTYKCWR1cCAvLyBkdXBsaWNhdGUgc3RhcnQgb2YgZWxlbWVudAoJbG9hZCAwIC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWV4dHJhY3RfdWludDE2IC8vIGdldCBudW1iZXIgb2YgZWxlbWVudHMKCWludCAxIC8vIGdldCB0eXBlIGxlbmd0aAoJKiAvLyBtdWx0aXBseSBieSB0eXBlIGxlbmd0aAoJaW50IDIKCSsgLy8gYWRkIHR3byBmb3IgbGVuZ3RoCglleHRyYWN0MwoJZXh0cmFjdCAyIDAKCWZyYW1lX2RpZyAtNyAvLyBpOiB1aW50NjQKCWludCAzMgoJKgoJaW50IDMyCglleHRyYWN0MwoJYnRvaQoJZnJhbWVfYnVyeSAtOCAvLyBjdXJyZW50QXNzZXQ6IGFzc2V0CgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6MTg2CgkvLyBjdXJyZW50VG8gPSBBZGRyZXNzLmZyb21CeXRlcyhleHRyYWN0Myh3aWxsLmFzc2V0c1RvLCBpICogMzIsIDMyKSkKCWZyYW1lX2RpZyAtMiAvLyBzdG9yYWdlIGtleS8vd2lsbAoJYm94X2dldAoJYXNzZXJ0CglzdG9yZSAwIC8vIGZ1bGwgYXJyYXkKCWludCA0NAoJbG9hZCAwIC8vIGZ1bGwgYXJyYXkKCWxvYWQgMCAvLyBmdWxsIGFycmF5Cgl1bmNvdmVyIDIKCWV4dHJhY3RfdWludDE2CglkdXAgLy8gZHVwbGljYXRlIHN0YXJ0IG9mIGVsZW1lbnQKCWxvYWQgMCAvLyBmdWxsIGFycmF5Cglzd2FwCglleHRyYWN0X3VpbnQxNiAvLyBnZXQgbnVtYmVyIG9mIGVsZW1lbnRzCglpbnQgMSAvLyBnZXQgdHlwZSBsZW5ndGgKCSogLy8gbXVsdGlwbHkgYnkgdHlwZSBsZW5ndGgKCWludCAyCgkrIC8vIGFkZCB0d28gZm9yIGxlbmd0aAoJZXh0cmFjdDMKCWV4dHJhY3QgMiAwCglmcmFtZV9kaWcgLTcgLy8gaTogdWludDY0CglpbnQgMzIKCSoKCWludCAzMgoJZXh0cmFjdDMKCWZyYW1lX2J1cnkgLTkgLy8gY3VycmVudFRvOiBhZGRyZXNzCgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6MTg3CgkvLyBjdXJyZW50QW1vdW50ID0gYnRvaShleHRyYWN0Myh3aWxsLmFzc2V0c0Ftb3VudCwgaSAqIDgsIDgpKQoJZnJhbWVfZGlnIC0yIC8vIHN0b3JhZ2Uga2V5Ly93aWxsCglib3hfZ2V0Cglhc3NlcnQKCXN0b3JlIDAgLy8gZnVsbCBhcnJheQoJaW50IDQyCglsb2FkIDAgLy8gZnVsbCBhcnJheQoJbG9hZCAwIC8vIGZ1bGwgYXJyYXkKCXVuY292ZXIgMgoJZXh0cmFjdF91aW50MTYKCWR1cCAvLyBkdXBsaWNhdGUgc3RhcnQgb2YgZWxlbWVudAoJbG9hZCAwIC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWV4dHJhY3RfdWludDE2IC8vIGdldCBudW1iZXIgb2YgZWxlbWVudHMKCWludCAxIC8vIGdldCB0eXBlIGxlbmd0aAoJKiAvLyBtdWx0aXBseSBieSB0eXBlIGxlbmd0aAoJaW50IDIKCSsgLy8gYWRkIHR3byBmb3IgbGVuZ3RoCglleHRyYWN0MwoJZXh0cmFjdCAyIDAKCWZyYW1lX2RpZyAtNyAvLyBpOiB1aW50NjQKCWludCA4CgkqCglpbnQgOAoJZXh0cmFjdDMKCWJ0b2kKCWZyYW1lX2J1cnkgLTEwIC8vIGN1cnJlbnRBbW91bnQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9XaWxsRXhlYy5hbGdvLnRzOjE4OQoJLy8gdGhpcy5zZW5kQXNzZXQoY3VycmVudEFzc2V0LCBjdXJyZW50VG8sIGN1cnJlbnRBbW91bnQpCglmcmFtZV9kaWcgLTEwIC8vIGN1cnJlbnRBbW91bnQ6IHVpbnQ2NAoJZnJhbWVfZGlnIC05IC8vIGN1cnJlbnRUbzogYWRkcmVzcwoJZnJhbWVfZGlnIC04IC8vIGN1cnJlbnRBc3NldDogYXNzZXQKCWNhbGxzdWIgc2VuZEFzc2V0CgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6MTg0CgkvLyBpID0gaSArIDEKCWZyYW1lX2RpZyAtNyAvLyBpOiB1aW50NjQKCWludCAxCgkrCglmcmFtZV9idXJ5IC03IC8vIGk6IHVpbnQ2NAoJYiBmb3JfNAoKZm9yXzRfZW5kOgoJLy8gY29udHJhY3RzL1dpbGxFeGVjLmFsZ28udHM6MTkzCgkvLyB0aGlzLndpbGxzKHdpbGxJZCkuZGVsZXRlKCkKCWZyYW1lX2RpZyAtMSAvLyB3aWxsSWQ6IHVpbnQ2NAoJaXRvYgoJYm94X2RlbAoJcmV0c3ViCgphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb246CglpbnQgMQoJcmV0dXJuCgpjcmVhdGVfTm9PcDoKCW1ldGhvZCAiY3JlYXRlQXBwbGljYXRpb24oKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCBhYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb24KCWVycgoKY2FsbF9Ob09wOgoJbWV0aG9kICJhc3NldE9wdEluKGFzc2V0KXZvaWQiCgltZXRob2QgImNyZWF0ZVdpbGwoYWRkcmVzcyxieXRlW10sYnl0ZVtdLGJ5dGVbXSxieXRlW10sYnl0ZVtdLHVpbnQ2NCl1aW50NjQiCgltZXRob2QgImluY3JlYXRlRW5kVGltZSh1aW50NjQpdm9pZCIKCW1ldGhvZCAiZXhlY3V0ZVdpbGwodWludDY0KXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCBhYmlfcm91dGVfYXNzZXRPcHRJbiBhYmlfcm91dGVfY3JlYXRlV2lsbCBhYmlfcm91dGVfaW5jcmVhdGVFbmRUaW1lIGFiaV9yb3V0ZV9leGVjdXRlV2lsbAoJZXJyCgpwcm9jZXNzX3N0YXRpY190dXBsZV9lbGVtZW50OgoJcHJvdG8gNCAzCglmcmFtZV9kaWcgLTQgLy8gdHVwbGUgaGVhZAoJZnJhbWVfZGlnIC0xIC8vIGVsZW1lbnQKCWNvbmNhdAoJZnJhbWVfZGlnIC0zIC8vIHR1cGxlIHRhaWwKCWZyYW1lX2RpZyAtMiAvLyBoZWFkIG9mZnNldAoJcmV0c3ViCgpwcm9jZXNzX2R5bmFtaWNfdHVwbGVfZWxlbWVudDoKCXByb3RvIDQgMwoJZnJhbWVfZGlnIC00IC8vIHR1cGxlIGhlYWQKCWZyYW1lX2RpZyAtMiAvLyBoZWFkIG9mZnNldAoJY29uY2F0CglmcmFtZV9idXJ5IC00IC8vIHR1cGxlIGhlYWQKCWZyYW1lX2RpZyAtMSAvLyBlbGVtZW50CglkdXAKCWxlbgoJZnJhbWVfZGlnIC0yIC8vIGhlYWQgb2Zmc2V0CglidG9pCgkrCglpdG9iCglleHRyYWN0IDYgMgoJZnJhbWVfYnVyeSAtMiAvLyBoZWFkIG9mZnNldAoJZnJhbWVfZGlnIC0zIC8vIHR1cGxlIHRhaWwKCXN3YXAKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMyAvLyB0dXBsZSB0YWlsCglmcmFtZV9kaWcgLTQgLy8gdHVwbGUgaGVhZAoJZnJhbWVfZGlnIC0zIC8vIHR1cGxlIHRhaWwKCWZyYW1lX2RpZyAtMiAvLyBoZWFkIG9mZnNldAoJcmV0c3Vi",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "Willexec",
    "desc": "",
    "methods": [
      {
        "name": "assetOptIn",
        "args": [
          {
            "name": "asset",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "createWill",
        "args": [
          {
            "name": "from",
            "type": "address",
            "desc": ""
          },
          {
            "name": "assets",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "assetsAmount",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "assetsTo",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "nativeAmount",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "nativeTo",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "endTime",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "increateEndTime",
        "args": [
          {
            "name": "willId",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "executeWill",
        "args": [
          {
            "name": "willId",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "createApplication",
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        },
        "args": []
      }
    ]
  }
}